// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages.proto

#include "steamnetworkingsockets_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class CMsgSteamDatagramSessionCryptInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramSessionCryptInfo>
      _instance;
} _CMsgSteamDatagramSessionCryptInfo_default_instance_;
class CMsgSteamDatagramSessionCryptInfoSignedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramSessionCryptInfoSigned>
      _instance;
} _CMsgSteamDatagramSessionCryptInfoSigned_default_instance_;
class CMsgSteamDatagramDiagnosticDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramDiagnostic>
      _instance;
} _CMsgSteamDatagramDiagnostic_default_instance_;
class CMsgSteamDatagramLinkInstantaneousStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramLinkInstantaneousStats>
      _instance;
} _CMsgSteamDatagramLinkInstantaneousStats_default_instance_;
class CMsgSteamDatagramLinkLifetimeStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramLinkLifetimeStats>
      _instance;
} _CMsgSteamDatagramLinkLifetimeStats_default_instance_;
class CMsgSteamDatagramConnectionQualityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramConnectionQuality>
      _instance;
} _CMsgSteamDatagramConnectionQuality_default_instance_;
class CMsgICERendezvous_AuthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgICERendezvous_Auth>
      _instance;
} _CMsgICERendezvous_Auth_default_instance_;
class CMsgICERendezvous_CandidateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgICERendezvous_Candidate>
      _instance;
} _CMsgICERendezvous_Candidate_default_instance_;
class CMsgICERendezvousDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgICERendezvous>
      _instance;
} _CMsgICERendezvous_default_instance_;
class CMsgSteamNetworkingP2PRendezvous_ConnectRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamNetworkingP2PRendezvous_ConnectRequest>
      _instance;
} _CMsgSteamNetworkingP2PRendezvous_ConnectRequest_default_instance_;
class CMsgSteamNetworkingP2PRendezvous_ConnectOKDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamNetworkingP2PRendezvous_ConnectOK>
      _instance;
} _CMsgSteamNetworkingP2PRendezvous_ConnectOK_default_instance_;
class CMsgSteamNetworkingP2PRendezvous_ConnectionClosedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamNetworkingP2PRendezvous_ConnectionClosed>
      _instance;
} _CMsgSteamNetworkingP2PRendezvous_ConnectionClosed_default_instance_;
class CMsgSteamNetworkingP2PRendezvous_ReliableMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamNetworkingP2PRendezvous_ReliableMessage>
      _instance;
} _CMsgSteamNetworkingP2PRendezvous_ReliableMessage_default_instance_;
class CMsgSteamNetworkingP2PRendezvousDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamNetworkingP2PRendezvous>
      _instance;
} _CMsgSteamNetworkingP2PRendezvous_default_instance_;
class CMsgSteamNetworkingICESessionSummaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamNetworkingICESessionSummary>
      _instance;
} _CMsgSteamNetworkingICESessionSummary_default_instance_;
namespace protobuf_steamnetworkingsockets_5fmessages_2eproto {
void InitDefaultsCMsgSteamDatagramSessionCryptInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSteamDatagramSessionCryptInfo_default_instance_;
    new (ptr) ::CMsgSteamDatagramSessionCryptInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramSessionCryptInfo::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramSessionCryptInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramSessionCryptInfoImpl);
}

void InitDefaultsCMsgSteamDatagramSessionCryptInfoSignedImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSteamDatagramSessionCryptInfoSigned_default_instance_;
    new (ptr) ::CMsgSteamDatagramSessionCryptInfoSigned();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramSessionCryptInfoSigned::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramSessionCryptInfoSigned() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramSessionCryptInfoSignedImpl);
}

void InitDefaultsCMsgSteamDatagramDiagnosticImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSteamDatagramDiagnostic_default_instance_;
    new (ptr) ::CMsgSteamDatagramDiagnostic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramDiagnostic::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramDiagnostic() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramDiagnosticImpl);
}

void InitDefaultsCMsgSteamDatagramLinkInstantaneousStatsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSteamDatagramLinkInstantaneousStats_default_instance_;
    new (ptr) ::CMsgSteamDatagramLinkInstantaneousStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramLinkInstantaneousStats::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramLinkInstantaneousStats() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramLinkInstantaneousStatsImpl);
}

void InitDefaultsCMsgSteamDatagramLinkLifetimeStatsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSteamDatagramLinkLifetimeStats_default_instance_;
    new (ptr) ::CMsgSteamDatagramLinkLifetimeStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramLinkLifetimeStats::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramLinkLifetimeStats() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramLinkLifetimeStatsImpl);
}

void InitDefaultsCMsgSteamDatagramConnectionQualityImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramLinkInstantaneousStats();
  protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramLinkLifetimeStats();
  {
    void* ptr = &::_CMsgSteamDatagramConnectionQuality_default_instance_;
    new (ptr) ::CMsgSteamDatagramConnectionQuality();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramConnectionQuality::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramConnectionQuality() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramConnectionQualityImpl);
}

void InitDefaultsCMsgICERendezvous_AuthImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgICERendezvous_Auth_default_instance_;
    new (ptr) ::CMsgICERendezvous_Auth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgICERendezvous_Auth::InitAsDefaultInstance();
}

void InitDefaultsCMsgICERendezvous_Auth() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgICERendezvous_AuthImpl);
}

void InitDefaultsCMsgICERendezvous_CandidateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgICERendezvous_Candidate_default_instance_;
    new (ptr) ::CMsgICERendezvous_Candidate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgICERendezvous_Candidate::InitAsDefaultInstance();
}

void InitDefaultsCMsgICERendezvous_Candidate() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgICERendezvous_CandidateImpl);
}

void InitDefaultsCMsgICERendezvousImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgICERendezvous_Auth();
  protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgICERendezvous_Candidate();
  {
    void* ptr = &::_CMsgICERendezvous_default_instance_;
    new (ptr) ::CMsgICERendezvous();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgICERendezvous::InitAsDefaultInstance();
}

void InitDefaultsCMsgICERendezvous() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgICERendezvousImpl);
}

void InitDefaultsCMsgSteamNetworkingP2PRendezvous_ConnectRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramSessionCryptInfoSigned();
  protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::InitDefaultsCMsgSteamDatagramCertificateSigned();
  {
    void* ptr = &::_CMsgSteamNetworkingP2PRendezvous_ConnectRequest_default_instance_;
    new (ptr) ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamNetworkingP2PRendezvous_ConnectRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamNetworkingP2PRendezvous_ConnectRequestImpl);
}

void InitDefaultsCMsgSteamNetworkingP2PRendezvous_ConnectOKImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramSessionCryptInfoSigned();
  protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::InitDefaultsCMsgSteamDatagramCertificateSigned();
  {
    void* ptr = &::_CMsgSteamNetworkingP2PRendezvous_ConnectOK_default_instance_;
    new (ptr) ::CMsgSteamNetworkingP2PRendezvous_ConnectOK();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamNetworkingP2PRendezvous_ConnectOK::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamNetworkingP2PRendezvous_ConnectOK() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamNetworkingP2PRendezvous_ConnectOKImpl);
}

void InitDefaultsCMsgSteamNetworkingP2PRendezvous_ConnectionClosedImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSteamNetworkingP2PRendezvous_ConnectionClosed_default_instance_;
    new (ptr) ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamNetworkingP2PRendezvous_ConnectionClosed() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamNetworkingP2PRendezvous_ConnectionClosedImpl);
}

void InitDefaultsCMsgSteamNetworkingP2PRendezvous_ReliableMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgICERendezvous();
  {
    void* ptr = &::_CMsgSteamNetworkingP2PRendezvous_ReliableMessage_default_instance_;
    new (ptr) ::CMsgSteamNetworkingP2PRendezvous_ReliableMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamNetworkingP2PRendezvous_ReliableMessage::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamNetworkingP2PRendezvous_ReliableMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamNetworkingP2PRendezvous_ReliableMessageImpl);
}

void InitDefaultsCMsgSteamNetworkingP2PRendezvousImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamNetworkingP2PRendezvous_ConnectRequest();
  protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamNetworkingP2PRendezvous_ConnectOK();
  protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamNetworkingP2PRendezvous_ConnectionClosed();
  protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamNetworkingP2PRendezvous_ReliableMessage();
  {
    void* ptr = &::_CMsgSteamNetworkingP2PRendezvous_default_instance_;
    new (ptr) ::CMsgSteamNetworkingP2PRendezvous();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamNetworkingP2PRendezvous::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamNetworkingP2PRendezvous() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamNetworkingP2PRendezvousImpl);
}

void InitDefaultsCMsgSteamNetworkingICESessionSummaryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSteamNetworkingICESessionSummary_default_instance_;
    new (ptr) ::CMsgSteamNetworkingICESessionSummary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamNetworkingICESessionSummary::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamNetworkingICESessionSummary() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamNetworkingICESessionSummaryImpl);
}

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfo, key_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfo, key_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfo, nonce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfo, protocol_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfo, ciphers_),
  1,
  0,
  3,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfoSigned, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfoSigned, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfoSigned, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfoSigned, signature_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramDiagnostic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramDiagnostic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramDiagnostic, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramDiagnostic, text_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, out_packets_per_sec_x10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, out_bytes_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, in_packets_per_sec_x10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, in_bytes_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, ping_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, packets_dropped_pct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, packets_weird_sequence_pct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, peak_jitter_usec_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, connected_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, kb_sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_recv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, kb_recv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_recv_sequenced_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_recv_dropped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_recv_out_of_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_recv_duplicate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_recv_lurch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_100_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_99_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_97_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_95_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_90_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_75_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_50_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_dead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_ntile_2nd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_ntile_5th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_ntile_25th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_ntile_50th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_25_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_50_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_75_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_100_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_125_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_150_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_200_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_300_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_ntile_5th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_ntile_50th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_ntile_75th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_ntile_95th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_ntile_98th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_negligible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_20_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_128_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_256_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_512_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_1024_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_ntile_5th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_ntile_50th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_ntile_75th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_ntile_95th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_ntile_98th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_128_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_256_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_512_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_1024_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_ntile_5th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_ntile_50th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_ntile_75th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_ntile_95th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_ntile_98th_),
  9,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  70,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionQuality, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionQuality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionQuality, instantaneous_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionQuality, lifetime_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgICERendezvous_Auth, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgICERendezvous_Auth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgICERendezvous_Auth, pwd_frag_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgICERendezvous_Candidate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgICERendezvous_Candidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgICERendezvous_Candidate, candidate_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgICERendezvous, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgICERendezvous, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgICERendezvous, auth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgICERendezvous, add_candidate_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectRequest, crypt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectRequest, cert_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectRequest, to_virtual_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectRequest, from_virtual_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectRequest, from_fakeip_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectOK, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectOK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectOK, crypt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectOK, cert_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed, debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed, reason_code_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ReliableMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ReliableMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ReliableMessage, ice_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, from_identity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, from_connection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, to_identity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, to_connection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, sdr_routes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, ack_peer_routes_revision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, ice_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, hosted_server_ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, connect_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, connect_ok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, connection_closed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, ack_reliable_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, first_reliable_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, reliable_messages_),
  1,
  10,
  2,
  7,
  0,
  8,
  9,
  3,
  4,
  5,
  6,
  11,
  12,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, failure_reason_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, local_candidate_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, remote_candidate_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, initial_route_kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, initial_ping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, initial_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, negotiation_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, best_route_kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, best_ping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, best_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, best_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, selected_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, user_settings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, ice_enable_var_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, local_candidate_types_allowed_),
  6,
  0,
  1,
  2,
  3,
  5,
  4,
  11,
  13,
  14,
  12,
  7,
  8,
  9,
  10,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::CMsgSteamDatagramSessionCryptInfo)},
  { 15, 22, sizeof(::CMsgSteamDatagramSessionCryptInfoSigned)},
  { 24, 31, sizeof(::CMsgSteamDatagramDiagnostic)},
  { 33, 46, sizeof(::CMsgSteamDatagramLinkInstantaneousStats)},
  { 54, 130, sizeof(::CMsgSteamDatagramLinkLifetimeStats)},
  { 201, 208, sizeof(::CMsgSteamDatagramConnectionQuality)},
  { 210, 216, sizeof(::CMsgICERendezvous_Auth)},
  { 217, 223, sizeof(::CMsgICERendezvous_Candidate)},
  { 224, 231, sizeof(::CMsgICERendezvous)},
  { 233, 243, sizeof(::CMsgSteamNetworkingP2PRendezvous_ConnectRequest)},
  { 248, 255, sizeof(::CMsgSteamNetworkingP2PRendezvous_ConnectOK)},
  { 257, 264, sizeof(::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed)},
  { 266, 272, sizeof(::CMsgSteamNetworkingP2PRendezvous_ReliableMessage)},
  { 273, 292, sizeof(::CMsgSteamNetworkingP2PRendezvous)},
  { 306, 326, sizeof(::CMsgSteamNetworkingICESessionSummary)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramSessionCryptInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramSessionCryptInfoSigned_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramDiagnostic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramLinkInstantaneousStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramLinkLifetimeStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramConnectionQuality_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgICERendezvous_Auth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgICERendezvous_Candidate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgICERendezvous_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamNetworkingP2PRendezvous_ConnectRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamNetworkingP2PRendezvous_ConnectOK_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamNetworkingP2PRendezvous_ConnectionClosed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamNetworkingP2PRendezvous_ReliableMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamNetworkingP2PRendezvous_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamNetworkingICESessionSummary_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steamnetworkingsockets_messages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n%steamnetworkingsockets_messages.proto\032"
      "+steamnetworkingsockets_messages_certs.p"
      "roto\"\367\001\n!CMsgSteamDatagramSessionCryptIn"
      "fo\022=\n\010key_type\030\001 \001(\0162+.CMsgSteamDatagram"
      "SessionCryptInfo.EKeyType\022\020\n\010key_data\030\002 "
      "\001(\014\022\r\n\005nonce\030\003 \001(\006\022\030\n\020protocol_version\030\004"
      " \001(\r\022/\n\007ciphers\030\005 \003(\0162\036.ESteamNetworking"
      "SocketsCipher\"\'\n\010EKeyType\022\013\n\007INVALID\020\000\022\016"
      "\n\nCURVE25519\020\001\"J\n\'CMsgSteamDatagramSessi"
      "onCryptInfoSigned\022\014\n\004info\030\001 \001(\014\022\021\n\tsigna"
      "ture\030\002 \001(\014\"=\n\033CMsgSteamDatagramDiagnosti"
      "c\022\020\n\010severity\030\001 \001(\r\022\014\n\004text\030\002 \001(\t\"\213\002\n\'CM"
      "sgSteamDatagramLinkInstantaneousStats\022\037\n"
      "\027out_packets_per_sec_x10\030\001 \001(\r\022\031\n\021out_by"
      "tes_per_sec\030\002 \001(\r\022\036\n\026in_packets_per_sec_"
      "x10\030\003 \001(\r\022\030\n\020in_bytes_per_sec\030\004 \001(\r\022\017\n\007p"
      "ing_ms\030\005 \001(\r\022\033\n\023packets_dropped_pct\030\006 \001("
      "\r\022\"\n\032packets_weird_sequence_pct\030\007 \001(\r\022\030\n"
      "\020peak_jitter_usec\030\010 \001(\r\"\374\017\n\"CMsgSteamDat"
      "agramLinkLifetimeStats\022\031\n\021connected_seco"
      "nds\030\002 \001(\r\022\024\n\014packets_sent\030\003 \001(\004\022\017\n\007kb_se"
      "nt\030\004 \001(\004\022\024\n\014packets_recv\030\005 \001(\004\022\017\n\007kb_rec"
      "v\030\006 \001(\004\022\036\n\026packets_recv_sequenced\030\007 \001(\004\022"
      "\034\n\024packets_recv_dropped\030\010 \001(\004\022!\n\031packets"
      "_recv_out_of_order\030\t \001(\004\022\036\n\026packets_recv"
      "_duplicate\030\n \001(\004\022\032\n\022packets_recv_lurch\030\013"
      " \001(\004\022\035\n\025quality_histogram_100\030\025 \001(\r\022\034\n\024q"
      "uality_histogram_99\030\026 \001(\r\022\034\n\024quality_his"
      "togram_97\030\027 \001(\r\022\034\n\024quality_histogram_95\030"
      "\030 \001(\r\022\034\n\024quality_histogram_90\030\031 \001(\r\022\034\n\024q"
      "uality_histogram_75\030\032 \001(\r\022\034\n\024quality_his"
      "togram_50\030\033 \001(\r\022\033\n\023quality_histogram_1\030\034"
      " \001(\r\022\036\n\026quality_histogram_dead\030\035 \001(\r\022\031\n\021"
      "quality_ntile_2nd\030\036 \001(\r\022\031\n\021quality_ntile"
      "_5th\030\037 \001(\r\022\032\n\022quality_ntile_25th\030  \001(\r\022\032"
      "\n\022quality_ntile_50th\030! \001(\r\022\031\n\021ping_histo"
      "gram_25\030) \001(\r\022\031\n\021ping_histogram_50\030* \001(\r"
      "\022\031\n\021ping_histogram_75\030+ \001(\r\022\032\n\022ping_hist"
      "ogram_100\030, \001(\r\022\032\n\022ping_histogram_125\030- "
      "\001(\r\022\032\n\022ping_histogram_150\030. \001(\r\022\032\n\022ping_"
      "histogram_200\030/ \001(\r\022\032\n\022ping_histogram_30"
      "0\0300 \001(\r\022\032\n\022ping_histogram_max\0301 \001(\r\022\026\n\016p"
      "ing_ntile_5th\0302 \001(\r\022\027\n\017ping_ntile_50th\0303"
      " \001(\r\022\027\n\017ping_ntile_75th\0304 \001(\r\022\027\n\017ping_nt"
      "ile_95th\0305 \001(\r\022\027\n\017ping_ntile_98th\0306 \001(\r\022"
      "#\n\033jitter_histogram_negligible\030= \001(\r\022\032\n\022"
      "jitter_histogram_1\030> \001(\r\022\032\n\022jitter_histo"
      "gram_2\030\? \001(\r\022\032\n\022jitter_histogram_5\030@ \001(\r"
      "\022\033\n\023jitter_histogram_10\030A \001(\r\022\033\n\023jitter_"
      "histogram_20\030B \001(\r\022\023\n\013txspeed_max\030C \001(\r\022"
      "\034\n\024txspeed_histogram_16\030D \001(\r\022\034\n\024txspeed"
      "_histogram_32\030E \001(\r\022\034\n\024txspeed_histogram"
      "_64\030F \001(\r\022\035\n\025txspeed_histogram_128\030G \001(\r"
      "\022\035\n\025txspeed_histogram_256\030H \001(\r\022\035\n\025txspe"
      "ed_histogram_512\030I \001(\r\022\036\n\026txspeed_histog"
      "ram_1024\030J \001(\r\022\035\n\025txspeed_histogram_max\030"
      "K \001(\r\022\031\n\021txspeed_ntile_5th\030L \001(\r\022\032\n\022txsp"
      "eed_ntile_50th\030M \001(\r\022\032\n\022txspeed_ntile_75"
      "th\030N \001(\r\022\032\n\022txspeed_ntile_95th\030O \001(\r\022\032\n\022"
      "txspeed_ntile_98th\030P \001(\r\022\023\n\013rxspeed_max\030"
      "Q \001(\r\022\034\n\024rxspeed_histogram_16\030R \001(\r\022\034\n\024r"
      "xspeed_histogram_32\030S \001(\r\022\034\n\024rxspeed_his"
      "togram_64\030T \001(\r\022\035\n\025rxspeed_histogram_128"
      "\030U \001(\r\022\035\n\025rxspeed_histogram_256\030V \001(\r\022\035\n"
      "\025rxspeed_histogram_512\030W \001(\r\022\036\n\026rxspeed_"
      "histogram_1024\030X \001(\r\022\035\n\025rxspeed_histogra"
      "m_max\030Y \001(\r\022\031\n\021rxspeed_ntile_5th\030Z \001(\r\022\032"
      "\n\022rxspeed_ntile_50th\030[ \001(\r\022\032\n\022rxspeed_nt"
      "ile_75th\030\\ \001(\r\022\032\n\022rxspeed_ntile_95th\030] \001"
      "(\r\022\032\n\022rxspeed_ntile_98th\030^ \001(\r\"\234\001\n\"CMsgS"
      "teamDatagramConnectionQuality\022\?\n\rinstant"
      "aneous\030\001 \001(\0132(.CMsgSteamDatagramLinkInst"
      "antaneousStats\0225\n\010lifetime\030\002 \001(\0132#.CMsgS"
      "teamDatagramLinkLifetimeStats\"\251\001\n\021CMsgIC"
      "ERendezvous\022%\n\004auth\030\002 \001(\0132\027.CMsgICERende"
      "zvous.Auth\0223\n\radd_candidate\030\001 \001(\0132\034.CMsg"
      "ICERendezvous.Candidate\032\030\n\004Auth\022\020\n\010pwd_f"
      "rag\030\001 \001(\t\032\036\n\tCandidate\022\021\n\tcandidate\030\003 \001("
      "\t\"\371\007\n CMsgSteamNetworkingP2PRendezvous\022\025"
      "\n\rfrom_identity\030\010 \001(\t\022\032\n\022from_connection"
      "_id\030\t \001(\007\022\023\n\013to_identity\030\n \001(\t\022\030\n\020to_con"
      "nection_id\030\001 \001(\007\022\022\n\nsdr_routes\030\002 \001(\014\022 \n\030"
      "ack_peer_routes_revision\030\003 \001(\r\022\023\n\013ice_en"
      "abled\030\007 \001(\010\022\034\n\024hosted_server_ticket\030\016 \001("
      "\014\022I\n\017connect_request\030\004 \001(\01320.CMsgSteamNe"
      "tworkingP2PRendezvous.ConnectRequest\022\?\n\n"
      "connect_ok\030\005 \001(\0132+.CMsgSteamNetworkingP2"
      "PRendezvous.ConnectOK\022M\n\021connection_clos"
      "ed\030\006 \001(\01322.CMsgSteamNetworkingP2PRendezv"
      "ous.ConnectionClosed\022\030\n\020ack_reliable_msg"
      "\030\013 \001(\r\022\032\n\022first_reliable_msg\030\014 \001(\r\022L\n\021re"
      "liable_messages\030\r \003(\01321.CMsgSteamNetwork"
      "ingP2PRendezvous.ReliableMessage\032\305\001\n\016Con"
      "nectRequest\0227\n\005crypt\030\006 \001(\0132(.CMsgSteamDa"
      "tagramSessionCryptInfoSigned\0221\n\004cert\030\007 \001"
      "(\0132#.CMsgSteamDatagramCertificateSigned\022"
      "\027\n\017to_virtual_port\030\t \001(\r\022\031\n\021from_virtual"
      "_port\030\n \001(\r\022\023\n\013from_fakeip\030\013 \001(\t\032w\n\tConn"
      "ectOK\0227\n\005crypt\030\005 \001(\0132(.CMsgSteamDatagram"
      "SessionCryptInfoSigned\0221\n\004cert\030\006 \001(\0132#.C"
      "MsgSteamDatagramCertificateSigned\0326\n\020Con"
      "nectionClosed\022\r\n\005debug\030\005 \001(\t\022\023\n\013reason_c"
      "ode\030\006 \001(\r\0322\n\017ReliableMessage\022\037\n\003ice\030\001 \001("
      "\0132\022.CMsgICERendezvous\"\246\003\n$CMsgSteamNetwo"
      "rkingICESessionSummary\022\033\n\023failure_reason"
      "_code\030\007 \001(\r\022\035\n\025local_candidate_types\030\001 \001"
      "(\r\022\036\n\026remote_candidate_types\030\002 \001(\r\022\032\n\022in"
      "itial_route_kind\030\003 \001(\r\022\024\n\014initial_ping\030\004"
      " \001(\r\022\025\n\rinitial_score\030\006 \001(\r\022\026\n\016negotiati"
      "on_ms\030\005 \001(\r\022\027\n\017best_route_kind\030\020 \001(\r\022\021\n\t"
      "best_ping\030\021 \001(\r\022\022\n\nbest_score\030\022 \001(\r\022\021\n\tb"
      "est_time\030\023 \001(\r\022\030\n\020selected_seconds\030\014 \001(\r"
      "\022\025\n\ruser_settings\030\r \001(\r\022\026\n\016ice_enable_va"
      "r\030\016 \001(\r\022%\n\035local_candidate_types_allowed"
      "\030\017 \001(\r*\247\001\n\035ESteamNetworkingSocketsCipher"
      "\022+\n\'k_ESteamNetworkingSocketsCipher_INVA"
      "LID\020\000\022(\n$k_ESteamNetworkingSocketsCipher"
      "_NULL\020\001\022/\n+k_ESteamNetworkingSocketsCiph"
      "er_AES_256_GCM\020\002B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4743);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steamnetworkingsockets_messages.proto", &protobuf_RegisterTypes);
  ::protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_steamnetworkingsockets_5fmessages_2eproto
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor() {
  protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_enum_descriptors[0];
}
bool CMsgSteamDatagramSessionCryptInfo_EKeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo::INVALID;
const CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo::CURVE25519;
const CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo::EKeyType_MIN;
const CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo::EKeyType_MAX;
const int CMsgSteamDatagramSessionCryptInfo::EKeyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ESteamNetworkingSocketsCipher_descriptor() {
  protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_enum_descriptors[1];
}
bool ESteamNetworkingSocketsCipher_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMsgSteamDatagramSessionCryptInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramSessionCryptInfo::kKeyTypeFieldNumber;
const int CMsgSteamDatagramSessionCryptInfo::kKeyDataFieldNumber;
const int CMsgSteamDatagramSessionCryptInfo::kNonceFieldNumber;
const int CMsgSteamDatagramSessionCryptInfo::kProtocolVersionFieldNumber;
const int CMsgSteamDatagramSessionCryptInfo::kCiphersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramSessionCryptInfo::CMsgSteamDatagramSessionCryptInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramSessionCryptInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramSessionCryptInfo)
}
CMsgSteamDatagramSessionCryptInfo::CMsgSteamDatagramSessionCryptInfo(const CMsgSteamDatagramSessionCryptInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ciphers_(from.ciphers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_data()) {
    key_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_data_);
  }
  ::memcpy(&key_type_, &from.key_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&key_type_)) + sizeof(nonce_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramSessionCryptInfo)
}

void CMsgSteamDatagramSessionCryptInfo::SharedCtor() {
  _cached_size_ = 0;
  key_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&key_type_)) + sizeof(nonce_));
}

CMsgSteamDatagramSessionCryptInfo::~CMsgSteamDatagramSessionCryptInfo() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramSessionCryptInfo)
  SharedDtor();
}

void CMsgSteamDatagramSessionCryptInfo::SharedDtor() {
  key_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramSessionCryptInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramSessionCryptInfo::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramSessionCryptInfo& CMsgSteamDatagramSessionCryptInfo::default_instance() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramSessionCryptInfo();
  return *internal_default_instance();
}

CMsgSteamDatagramSessionCryptInfo* CMsgSteamDatagramSessionCryptInfo::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramSessionCryptInfo* n = new CMsgSteamDatagramSessionCryptInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramSessionCryptInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramSessionCryptInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ciphers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!key_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*key_data_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&key_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nonce_) -
        reinterpret_cast<char*>(&key_type_)) + sizeof(nonce_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramSessionCryptInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramSessionCryptInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgSteamDatagramSessionCryptInfo_EKeyType_IsValid(value)) {
            set_key_type(static_cast< ::CMsgSteamDatagramSessionCryptInfo_EKeyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes key_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 nonce = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_nonce();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &nonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 protocol_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ESteamNetworkingSocketsCipher ciphers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ESteamNetworkingSocketsCipher_IsValid(value)) {
            add_ciphers(static_cast< ::ESteamNetworkingSocketsCipher >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 5,
                 ::ESteamNetworkingSocketsCipher_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_ciphers())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramSessionCryptInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramSessionCryptInfo)
  return false;
#undef DO_
}

void CMsgSteamDatagramSessionCryptInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramSessionCryptInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->key_type(), output);
  }

  // optional bytes key_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key_data(), output);
  }

  // optional fixed64 nonce = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->nonce(), output);
  }

  // optional uint32 protocol_version = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->protocol_version(), output);
  }

  // repeated .ESteamNetworkingSocketsCipher ciphers = 5;
  for (int i = 0, n = this->ciphers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ciphers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramSessionCryptInfo)
}

::google::protobuf::uint8* CMsgSteamDatagramSessionCryptInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramSessionCryptInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->key_type(), target);
  }

  // optional bytes key_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key_data(), target);
  }

  // optional fixed64 nonce = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->nonce(), target);
  }

  // optional uint32 protocol_version = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->protocol_version(), target);
  }

  // repeated .ESteamNetworkingSocketsCipher ciphers = 5;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    5, this->ciphers_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramSessionCryptInfo)
  return target;
}

size_t CMsgSteamDatagramSessionCryptInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramSessionCryptInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ESteamNetworkingSocketsCipher ciphers = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->ciphers_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->ciphers(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes key_data = 2;
    if (has_key_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key_data());
    }

    // optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1;
    if (has_key_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->key_type());
    }

    // optional uint32 protocol_version = 4;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

    // optional fixed64 nonce = 3;
    if (has_nonce()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramSessionCryptInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramSessionCryptInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramSessionCryptInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramSessionCryptInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramSessionCryptInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramSessionCryptInfo)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramSessionCryptInfo::MergeFrom(const CMsgSteamDatagramSessionCryptInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramSessionCryptInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ciphers_.MergeFrom(from.ciphers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key_data();
      key_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      key_type_ = from.key_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      nonce_ = from.nonce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramSessionCryptInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramSessionCryptInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramSessionCryptInfo::CopyFrom(const CMsgSteamDatagramSessionCryptInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramSessionCryptInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramSessionCryptInfo::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramSessionCryptInfo::Swap(CMsgSteamDatagramSessionCryptInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramSessionCryptInfo::InternalSwap(CMsgSteamDatagramSessionCryptInfo* other) {
  using std::swap;
  ciphers_.InternalSwap(&other->ciphers_);
  key_data_.Swap(&other->key_data_);
  swap(key_type_, other->key_type_);
  swap(protocol_version_, other->protocol_version_);
  swap(nonce_, other->nonce_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramSessionCryptInfo::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramSessionCryptInfoSigned::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramSessionCryptInfoSigned::kInfoFieldNumber;
const int CMsgSteamDatagramSessionCryptInfoSigned::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramSessionCryptInfoSigned::CMsgSteamDatagramSessionCryptInfoSigned()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramSessionCryptInfoSigned();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramSessionCryptInfoSigned)
}
CMsgSteamDatagramSessionCryptInfoSigned::CMsgSteamDatagramSessionCryptInfoSigned(const CMsgSteamDatagramSessionCryptInfoSigned& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_info()) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramSessionCryptInfoSigned)
}

void CMsgSteamDatagramSessionCryptInfoSigned::SharedCtor() {
  _cached_size_ = 0;
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgSteamDatagramSessionCryptInfoSigned::~CMsgSteamDatagramSessionCryptInfoSigned() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramSessionCryptInfoSigned)
  SharedDtor();
}

void CMsgSteamDatagramSessionCryptInfoSigned::SharedDtor() {
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramSessionCryptInfoSigned::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramSessionCryptInfoSigned::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramSessionCryptInfoSigned& CMsgSteamDatagramSessionCryptInfoSigned::default_instance() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramSessionCryptInfoSigned();
  return *internal_default_instance();
}

CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamDatagramSessionCryptInfoSigned::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramSessionCryptInfoSigned* n = new CMsgSteamDatagramSessionCryptInfoSigned;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramSessionCryptInfoSigned::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramSessionCryptInfoSigned)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!info_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*info_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*signature_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramSessionCryptInfoSigned::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramSessionCryptInfoSigned)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramSessionCryptInfoSigned)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramSessionCryptInfoSigned)
  return false;
#undef DO_
}

void CMsgSteamDatagramSessionCryptInfoSigned::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramSessionCryptInfoSigned)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->info(), output);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramSessionCryptInfoSigned)
}

::google::protobuf::uint8* CMsgSteamDatagramSessionCryptInfoSigned::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramSessionCryptInfoSigned)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes info = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->info(), target);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramSessionCryptInfoSigned)
  return target;
}

size_t CMsgSteamDatagramSessionCryptInfoSigned::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramSessionCryptInfoSigned)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->info());
    }

    // optional bytes signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramSessionCryptInfoSigned)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramSessionCryptInfoSigned* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramSessionCryptInfoSigned>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramSessionCryptInfoSigned)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramSessionCryptInfoSigned)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(const CMsgSteamDatagramSessionCryptInfoSigned& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramSessionCryptInfoSigned)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_info();
      info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
  }
}

void CMsgSteamDatagramSessionCryptInfoSigned::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramSessionCryptInfoSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramSessionCryptInfoSigned::CopyFrom(const CMsgSteamDatagramSessionCryptInfoSigned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramSessionCryptInfoSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramSessionCryptInfoSigned::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramSessionCryptInfoSigned::Swap(CMsgSteamDatagramSessionCryptInfoSigned* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramSessionCryptInfoSigned::InternalSwap(CMsgSteamDatagramSessionCryptInfoSigned* other) {
  using std::swap;
  info_.Swap(&other->info_);
  signature_.Swap(&other->signature_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramSessionCryptInfoSigned::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramDiagnostic::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramDiagnostic::kSeverityFieldNumber;
const int CMsgSteamDatagramDiagnostic::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramDiagnostic::CMsgSteamDatagramDiagnostic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramDiagnostic();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramDiagnostic)
}
CMsgSteamDatagramDiagnostic::CMsgSteamDatagramDiagnostic(const CMsgSteamDatagramDiagnostic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  severity_ = from.severity_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramDiagnostic)
}

void CMsgSteamDatagramDiagnostic::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  severity_ = 0u;
}

CMsgSteamDatagramDiagnostic::~CMsgSteamDatagramDiagnostic() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramDiagnostic)
  SharedDtor();
}

void CMsgSteamDatagramDiagnostic::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramDiagnostic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramDiagnostic::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramDiagnostic& CMsgSteamDatagramDiagnostic::default_instance() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramDiagnostic();
  return *internal_default_instance();
}

CMsgSteamDatagramDiagnostic* CMsgSteamDatagramDiagnostic::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramDiagnostic* n = new CMsgSteamDatagramDiagnostic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramDiagnostic::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramDiagnostic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  severity_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramDiagnostic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramDiagnostic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 severity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_severity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgSteamDatagramDiagnostic.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramDiagnostic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramDiagnostic)
  return false;
#undef DO_
}

void CMsgSteamDatagramDiagnostic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramDiagnostic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 severity = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->severity(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramDiagnostic.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramDiagnostic)
}

::google::protobuf::uint8* CMsgSteamDatagramDiagnostic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramDiagnostic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 severity = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->severity(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramDiagnostic.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramDiagnostic)
  return target;
}

size_t CMsgSteamDatagramDiagnostic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramDiagnostic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 severity = 1;
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->severity());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramDiagnostic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramDiagnostic)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramDiagnostic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramDiagnostic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramDiagnostic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramDiagnostic)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramDiagnostic::MergeFrom(const CMsgSteamDatagramDiagnostic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramDiagnostic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      severity_ = from.severity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramDiagnostic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramDiagnostic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramDiagnostic::CopyFrom(const CMsgSteamDatagramDiagnostic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramDiagnostic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramDiagnostic::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramDiagnostic::Swap(CMsgSteamDatagramDiagnostic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramDiagnostic::InternalSwap(CMsgSteamDatagramDiagnostic* other) {
  using std::swap;
  text_.Swap(&other->text_);
  swap(severity_, other->severity_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramDiagnostic::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramLinkInstantaneousStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramLinkInstantaneousStats::kOutPacketsPerSecX10FieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kOutBytesPerSecFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kInPacketsPerSecX10FieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kInBytesPerSecFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kPingMsFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kPacketsDroppedPctFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kPacketsWeirdSequencePctFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kPeakJitterUsecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramLinkInstantaneousStats::CMsgSteamDatagramLinkInstantaneousStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramLinkInstantaneousStats();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramLinkInstantaneousStats)
}
CMsgSteamDatagramLinkInstantaneousStats::CMsgSteamDatagramLinkInstantaneousStats(const CMsgSteamDatagramLinkInstantaneousStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&out_packets_per_sec_x10_, &from.out_packets_per_sec_x10_,
    static_cast<size_t>(reinterpret_cast<char*>(&peak_jitter_usec_) -
    reinterpret_cast<char*>(&out_packets_per_sec_x10_)) + sizeof(peak_jitter_usec_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramLinkInstantaneousStats)
}

void CMsgSteamDatagramLinkInstantaneousStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&out_packets_per_sec_x10_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peak_jitter_usec_) -
      reinterpret_cast<char*>(&out_packets_per_sec_x10_)) + sizeof(peak_jitter_usec_));
}

CMsgSteamDatagramLinkInstantaneousStats::~CMsgSteamDatagramLinkInstantaneousStats() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramLinkInstantaneousStats)
  SharedDtor();
}

void CMsgSteamDatagramLinkInstantaneousStats::SharedDtor() {
}

void CMsgSteamDatagramLinkInstantaneousStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramLinkInstantaneousStats::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramLinkInstantaneousStats& CMsgSteamDatagramLinkInstantaneousStats::default_instance() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramLinkInstantaneousStats();
  return *internal_default_instance();
}

CMsgSteamDatagramLinkInstantaneousStats* CMsgSteamDatagramLinkInstantaneousStats::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramLinkInstantaneousStats* n = new CMsgSteamDatagramLinkInstantaneousStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramLinkInstantaneousStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramLinkInstantaneousStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&out_packets_per_sec_x10_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&peak_jitter_usec_) -
        reinterpret_cast<char*>(&out_packets_per_sec_x10_)) + sizeof(peak_jitter_usec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramLinkInstantaneousStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramLinkInstantaneousStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 out_packets_per_sec_x10 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_out_packets_per_sec_x10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_packets_per_sec_x10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 out_bytes_per_sec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_out_bytes_per_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_bytes_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 in_packets_per_sec_x10 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_in_packets_per_sec_x10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_packets_per_sec_x10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 in_bytes_per_sec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_in_bytes_per_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_bytes_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ms = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_ping_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 packets_dropped_pct = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_packets_dropped_pct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packets_dropped_pct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 packets_weird_sequence_pct = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_packets_weird_sequence_pct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packets_weird_sequence_pct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 peak_jitter_usec = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_peak_jitter_usec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peak_jitter_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramLinkInstantaneousStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramLinkInstantaneousStats)
  return false;
#undef DO_
}

void CMsgSteamDatagramLinkInstantaneousStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramLinkInstantaneousStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 out_packets_per_sec_x10 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->out_packets_per_sec_x10(), output);
  }

  // optional uint32 out_bytes_per_sec = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->out_bytes_per_sec(), output);
  }

  // optional uint32 in_packets_per_sec_x10 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->in_packets_per_sec_x10(), output);
  }

  // optional uint32 in_bytes_per_sec = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->in_bytes_per_sec(), output);
  }

  // optional uint32 ping_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ping_ms(), output);
  }

  // optional uint32 packets_dropped_pct = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->packets_dropped_pct(), output);
  }

  // optional uint32 packets_weird_sequence_pct = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->packets_weird_sequence_pct(), output);
  }

  // optional uint32 peak_jitter_usec = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->peak_jitter_usec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramLinkInstantaneousStats)
}

::google::protobuf::uint8* CMsgSteamDatagramLinkInstantaneousStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramLinkInstantaneousStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 out_packets_per_sec_x10 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->out_packets_per_sec_x10(), target);
  }

  // optional uint32 out_bytes_per_sec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->out_bytes_per_sec(), target);
  }

  // optional uint32 in_packets_per_sec_x10 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->in_packets_per_sec_x10(), target);
  }

  // optional uint32 in_bytes_per_sec = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->in_bytes_per_sec(), target);
  }

  // optional uint32 ping_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ping_ms(), target);
  }

  // optional uint32 packets_dropped_pct = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->packets_dropped_pct(), target);
  }

  // optional uint32 packets_weird_sequence_pct = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->packets_weird_sequence_pct(), target);
  }

  // optional uint32 peak_jitter_usec = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->peak_jitter_usec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramLinkInstantaneousStats)
  return target;
}

size_t CMsgSteamDatagramLinkInstantaneousStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramLinkInstantaneousStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 out_packets_per_sec_x10 = 1;
    if (has_out_packets_per_sec_x10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_packets_per_sec_x10());
    }

    // optional uint32 out_bytes_per_sec = 2;
    if (has_out_bytes_per_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_bytes_per_sec());
    }

    // optional uint32 in_packets_per_sec_x10 = 3;
    if (has_in_packets_per_sec_x10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_packets_per_sec_x10());
    }

    // optional uint32 in_bytes_per_sec = 4;
    if (has_in_bytes_per_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_bytes_per_sec());
    }

    // optional uint32 ping_ms = 5;
    if (has_ping_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ms());
    }

    // optional uint32 packets_dropped_pct = 6;
    if (has_packets_dropped_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packets_dropped_pct());
    }

    // optional uint32 packets_weird_sequence_pct = 7;
    if (has_packets_weird_sequence_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packets_weird_sequence_pct());
    }

    // optional uint32 peak_jitter_usec = 8;
    if (has_peak_jitter_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->peak_jitter_usec());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramLinkInstantaneousStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramLinkInstantaneousStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramLinkInstantaneousStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramLinkInstantaneousStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramLinkInstantaneousStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramLinkInstantaneousStats)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramLinkInstantaneousStats::MergeFrom(const CMsgSteamDatagramLinkInstantaneousStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramLinkInstantaneousStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      out_packets_per_sec_x10_ = from.out_packets_per_sec_x10_;
    }
    if (cached_has_bits & 0x00000002u) {
      out_bytes_per_sec_ = from.out_bytes_per_sec_;
    }
    if (cached_has_bits & 0x00000004u) {
      in_packets_per_sec_x10_ = from.in_packets_per_sec_x10_;
    }
    if (cached_has_bits & 0x00000008u) {
      in_bytes_per_sec_ = from.in_bytes_per_sec_;
    }
    if (cached_has_bits & 0x00000010u) {
      ping_ms_ = from.ping_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      packets_dropped_pct_ = from.packets_dropped_pct_;
    }
    if (cached_has_bits & 0x00000040u) {
      packets_weird_sequence_pct_ = from.packets_weird_sequence_pct_;
    }
    if (cached_has_bits & 0x00000080u) {
      peak_jitter_usec_ = from.peak_jitter_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramLinkInstantaneousStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramLinkInstantaneousStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramLinkInstantaneousStats::CopyFrom(const CMsgSteamDatagramLinkInstantaneousStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramLinkInstantaneousStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramLinkInstantaneousStats::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramLinkInstantaneousStats::Swap(CMsgSteamDatagramLinkInstantaneousStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramLinkInstantaneousStats::InternalSwap(CMsgSteamDatagramLinkInstantaneousStats* other) {
  using std::swap;
  swap(out_packets_per_sec_x10_, other->out_packets_per_sec_x10_);
  swap(out_bytes_per_sec_, other->out_bytes_per_sec_);
  swap(in_packets_per_sec_x10_, other->in_packets_per_sec_x10_);
  swap(in_bytes_per_sec_, other->in_bytes_per_sec_);
  swap(ping_ms_, other->ping_ms_);
  swap(packets_dropped_pct_, other->packets_dropped_pct_);
  swap(packets_weird_sequence_pct_, other->packets_weird_sequence_pct_);
  swap(peak_jitter_usec_, other->peak_jitter_usec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramLinkInstantaneousStats::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramLinkLifetimeStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramLinkLifetimeStats::kConnectedSecondsFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsSentFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kKbSentFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kKbRecvFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvSequencedFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvDroppedFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvOutOfOrderFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvDuplicateFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvLurchFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram100FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram99FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram97FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram95FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram90FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram75FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram50FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram1FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogramDeadFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityNtile2NdFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityNtile5ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityNtile25ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityNtile50ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram25FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram50FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram75FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram100FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram125FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram150FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram200FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram300FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogramMaxFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile5ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile50ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile75ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile95ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile98ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogramNegligibleFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram1FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram2FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram5FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram10FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram20FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedMaxFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogram16FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogram32FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogram64FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogram128FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogram256FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogram512FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogram1024FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogramMaxFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedNtile5ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedNtile50ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedNtile75ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedNtile95ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedNtile98ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedMaxFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogram16FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogram32FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogram64FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogram128FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogram256FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogram512FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogram1024FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogramMaxFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedNtile5ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedNtile50ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedNtile75ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedNtile95ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedNtile98ThFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramLinkLifetimeStats::CMsgSteamDatagramLinkLifetimeStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramLinkLifetimeStats();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramLinkLifetimeStats)
}
CMsgSteamDatagramLinkLifetimeStats::CMsgSteamDatagramLinkLifetimeStats(const CMsgSteamDatagramLinkLifetimeStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packets_sent_, &from.packets_sent_,
    static_cast<size_t>(reinterpret_cast<char*>(&rxspeed_ntile_98th_) -
    reinterpret_cast<char*>(&packets_sent_)) + sizeof(rxspeed_ntile_98th_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramLinkLifetimeStats)
}

void CMsgSteamDatagramLinkLifetimeStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&packets_sent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rxspeed_ntile_98th_) -
      reinterpret_cast<char*>(&packets_sent_)) + sizeof(rxspeed_ntile_98th_));
}

CMsgSteamDatagramLinkLifetimeStats::~CMsgSteamDatagramLinkLifetimeStats() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramLinkLifetimeStats)
  SharedDtor();
}

void CMsgSteamDatagramLinkLifetimeStats::SharedDtor() {
}

void CMsgSteamDatagramLinkLifetimeStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramLinkLifetimeStats::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramLinkLifetimeStats& CMsgSteamDatagramLinkLifetimeStats::default_instance() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramLinkLifetimeStats();
  return *internal_default_instance();
}

CMsgSteamDatagramLinkLifetimeStats* CMsgSteamDatagramLinkLifetimeStats::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramLinkLifetimeStats* n = new CMsgSteamDatagramLinkLifetimeStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramLinkLifetimeStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramLinkLifetimeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&packets_sent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&packets_recv_duplicate_) -
        reinterpret_cast<char*>(&packets_sent_)) + sizeof(packets_recv_duplicate_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&packets_recv_lurch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quality_histogram_75_) -
        reinterpret_cast<char*>(&packets_recv_lurch_)) + sizeof(quality_histogram_75_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&quality_histogram_50_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ping_histogram_25_) -
        reinterpret_cast<char*>(&quality_histogram_50_)) + sizeof(ping_histogram_25_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&ping_histogram_50_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ping_histogram_max_) -
        reinterpret_cast<char*>(&ping_histogram_50_)) + sizeof(ping_histogram_max_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    ::memset(&ping_ntile_5th_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&jitter_histogram_2_) -
        reinterpret_cast<char*>(&ping_ntile_5th_)) + sizeof(jitter_histogram_2_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&jitter_histogram_5_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&txspeed_histogram_128_) -
        reinterpret_cast<char*>(&jitter_histogram_5_)) + sizeof(txspeed_histogram_128_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&txspeed_histogram_256_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&txspeed_ntile_95th_) -
        reinterpret_cast<char*>(&txspeed_histogram_256_)) + sizeof(txspeed_ntile_95th_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&txspeed_ntile_98th_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rxspeed_histogram_512_) -
        reinterpret_cast<char*>(&txspeed_ntile_98th_)) + sizeof(rxspeed_histogram_512_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 127u) {
    ::memset(&rxspeed_histogram_1024_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rxspeed_ntile_98th_) -
        reinterpret_cast<char*>(&rxspeed_histogram_1024_)) + sizeof(rxspeed_ntile_98th_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramLinkLifetimeStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramLinkLifetimeStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 connected_seconds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_connected_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connected_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 packets_sent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_packets_sent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 kb_sent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_kb_sent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kb_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 packets_recv = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_packets_recv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 kb_recv = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_kb_recv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kb_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 packets_recv_sequenced = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_packets_recv_sequenced();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_sequenced_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 packets_recv_dropped = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_packets_recv_dropped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_dropped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 packets_recv_out_of_order = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_packets_recv_out_of_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_out_of_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 packets_recv_duplicate = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_packets_recv_duplicate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_duplicate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 packets_recv_lurch = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_packets_recv_lurch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_lurch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_100 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_quality_histogram_100();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_100_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_99 = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_quality_histogram_99();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_99_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_97 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_quality_histogram_97();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_97_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_95 = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_quality_histogram_95();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_95_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_90 = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_quality_histogram_90();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_90_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_75 = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_quality_histogram_75();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_75_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_50 = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_quality_histogram_50();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_50_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_1 = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_quality_histogram_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_dead = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_quality_histogram_dead();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_dead_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_ntile_2nd = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_quality_ntile_2nd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_ntile_2nd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_ntile_5th = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_quality_ntile_5th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_ntile_5th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_ntile_25th = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_quality_ntile_25th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_ntile_25th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_ntile_50th = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_quality_ntile_50th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_ntile_50th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_25 = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          set_has_ping_histogram_25();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_25_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_50 = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {
          set_has_ping_histogram_50();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_50_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_75 = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {
          set_has_ping_histogram_75();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_75_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_100 = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {
          set_has_ping_histogram_100();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_100_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_125 = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {
          set_has_ping_histogram_125();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_125_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_150 = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 368 & 0xFF */)) {
          set_has_ping_histogram_150();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_150_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_200 = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 376 & 0xFF */)) {
          set_has_ping_histogram_200();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_200_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_300 = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 384 & 0xFF */)) {
          set_has_ping_histogram_300();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_300_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_max = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 392 & 0xFF */)) {
          set_has_ping_histogram_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ntile_5th = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {
          set_has_ping_ntile_5th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_5th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ntile_50th = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 408 & 0xFF */)) {
          set_has_ping_ntile_50th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_50th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ntile_75th = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {
          set_has_ping_ntile_75th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_75th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ntile_95th = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {
          set_has_ping_ntile_95th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_95th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ntile_98th = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 432 & 0xFF */)) {
          set_has_ping_ntile_98th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_98th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 jitter_histogram_negligible = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 488 & 0xFF */)) {
          set_has_jitter_histogram_negligible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_negligible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 jitter_histogram_1 = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 496 & 0xFF */)) {
          set_has_jitter_histogram_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 jitter_histogram_2 = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 504 & 0xFF */)) {
          set_has_jitter_histogram_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 jitter_histogram_5 = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 512 & 0xFF */)) {
          set_has_jitter_histogram_5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 jitter_histogram_10 = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 520 & 0xFF */)) {
          set_has_jitter_histogram_10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 jitter_histogram_20 = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 528 & 0xFF */)) {
          set_has_jitter_histogram_20();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_20_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_max = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 536 & 0xFF */)) {
          set_has_txspeed_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_histogram_16 = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 544 & 0xFF */)) {
          set_has_txspeed_histogram_16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_histogram_32 = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 552 & 0xFF */)) {
          set_has_txspeed_histogram_32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_histogram_64 = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {
          set_has_txspeed_histogram_64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_histogram_128 = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 568 & 0xFF */)) {
          set_has_txspeed_histogram_128();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_128_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_histogram_256 = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 576 & 0xFF */)) {
          set_has_txspeed_histogram_256();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_256_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_histogram_512 = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 584 & 0xFF */)) {
          set_has_txspeed_histogram_512();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_512_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_histogram_1024 = 74;
      case 74: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 592 & 0xFF */)) {
          set_has_txspeed_histogram_1024();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_1024_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_histogram_max = 75;
      case 75: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 600 & 0xFF */)) {
          set_has_txspeed_histogram_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_ntile_5th = 76;
      case 76: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 608 & 0xFF */)) {
          set_has_txspeed_ntile_5th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_ntile_5th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_ntile_50th = 77;
      case 77: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 616 & 0xFF */)) {
          set_has_txspeed_ntile_50th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_ntile_50th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_ntile_75th = 78;
      case 78: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 624 & 0xFF */)) {
          set_has_txspeed_ntile_75th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_ntile_75th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_ntile_95th = 79;
      case 79: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 632 & 0xFF */)) {
          set_has_txspeed_ntile_95th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_ntile_95th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_ntile_98th = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 640 & 0xFF */)) {
          set_has_txspeed_ntile_98th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_ntile_98th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_max = 81;
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 648 & 0xFF */)) {
          set_has_rxspeed_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_histogram_16 = 82;
      case 82: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 656 & 0xFF */)) {
          set_has_rxspeed_histogram_16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_histogram_32 = 83;
      case 83: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 664 & 0xFF */)) {
          set_has_rxspeed_histogram_32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_histogram_64 = 84;
      case 84: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 672 & 0xFF */)) {
          set_has_rxspeed_histogram_64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_histogram_128 = 85;
      case 85: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 680 & 0xFF */)) {
          set_has_rxspeed_histogram_128();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_128_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_histogram_256 = 86;
      case 86: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 688 & 0xFF */)) {
          set_has_rxspeed_histogram_256();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_256_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_histogram_512 = 87;
      case 87: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 696 & 0xFF */)) {
          set_has_rxspeed_histogram_512();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_512_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_histogram_1024 = 88;
      case 88: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 704 & 0xFF */)) {
          set_has_rxspeed_histogram_1024();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_1024_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_histogram_max = 89;
      case 89: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 712 & 0xFF */)) {
          set_has_rxspeed_histogram_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_ntile_5th = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 720 & 0xFF */)) {
          set_has_rxspeed_ntile_5th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_ntile_5th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_ntile_50th = 91;
      case 91: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 728 & 0xFF */)) {
          set_has_rxspeed_ntile_50th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_ntile_50th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_ntile_75th = 92;
      case 92: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 736 & 0xFF */)) {
          set_has_rxspeed_ntile_75th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_ntile_75th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_ntile_95th = 93;
      case 93: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 744 & 0xFF */)) {
          set_has_rxspeed_ntile_95th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_ntile_95th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_ntile_98th = 94;
      case 94: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 752 & 0xFF */)) {
          set_has_rxspeed_ntile_98th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_ntile_98th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramLinkLifetimeStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramLinkLifetimeStats)
  return false;
#undef DO_
}

void CMsgSteamDatagramLinkLifetimeStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramLinkLifetimeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 connected_seconds = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->connected_seconds(), output);
  }

  // optional uint64 packets_sent = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->packets_sent(), output);
  }

  // optional uint64 kb_sent = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->kb_sent(), output);
  }

  // optional uint64 packets_recv = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->packets_recv(), output);
  }

  // optional uint64 kb_recv = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->kb_recv(), output);
  }

  // optional uint64 packets_recv_sequenced = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->packets_recv_sequenced(), output);
  }

  // optional uint64 packets_recv_dropped = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->packets_recv_dropped(), output);
  }

  // optional uint64 packets_recv_out_of_order = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->packets_recv_out_of_order(), output);
  }

  // optional uint64 packets_recv_duplicate = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->packets_recv_duplicate(), output);
  }

  // optional uint64 packets_recv_lurch = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->packets_recv_lurch(), output);
  }

  // optional uint32 quality_histogram_100 = 21;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->quality_histogram_100(), output);
  }

  // optional uint32 quality_histogram_99 = 22;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->quality_histogram_99(), output);
  }

  // optional uint32 quality_histogram_97 = 23;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->quality_histogram_97(), output);
  }

  // optional uint32 quality_histogram_95 = 24;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->quality_histogram_95(), output);
  }

  // optional uint32 quality_histogram_90 = 25;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->quality_histogram_90(), output);
  }

  // optional uint32 quality_histogram_75 = 26;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->quality_histogram_75(), output);
  }

  // optional uint32 quality_histogram_50 = 27;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->quality_histogram_50(), output);
  }

  // optional uint32 quality_histogram_1 = 28;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->quality_histogram_1(), output);
  }

  // optional uint32 quality_histogram_dead = 29;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->quality_histogram_dead(), output);
  }

  // optional uint32 quality_ntile_2nd = 30;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->quality_ntile_2nd(), output);
  }

  // optional uint32 quality_ntile_5th = 31;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->quality_ntile_5th(), output);
  }

  // optional uint32 quality_ntile_25th = 32;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->quality_ntile_25th(), output);
  }

  // optional uint32 quality_ntile_50th = 33;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->quality_ntile_50th(), output);
  }

  // optional uint32 ping_histogram_25 = 41;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->ping_histogram_25(), output);
  }

  // optional uint32 ping_histogram_50 = 42;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->ping_histogram_50(), output);
  }

  // optional uint32 ping_histogram_75 = 43;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->ping_histogram_75(), output);
  }

  // optional uint32 ping_histogram_100 = 44;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->ping_histogram_100(), output);
  }

  // optional uint32 ping_histogram_125 = 45;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->ping_histogram_125(), output);
  }

  // optional uint32 ping_histogram_150 = 46;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->ping_histogram_150(), output);
  }

  // optional uint32 ping_histogram_200 = 47;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->ping_histogram_200(), output);
  }

  // optional uint32 ping_histogram_300 = 48;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->ping_histogram_300(), output);
  }

  // optional uint32 ping_histogram_max = 49;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->ping_histogram_max(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 ping_ntile_5th = 50;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->ping_ntile_5th(), output);
  }

  // optional uint32 ping_ntile_50th = 51;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->ping_ntile_50th(), output);
  }

  // optional uint32 ping_ntile_75th = 52;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->ping_ntile_75th(), output);
  }

  // optional uint32 ping_ntile_95th = 53;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->ping_ntile_95th(), output);
  }

  // optional uint32 ping_ntile_98th = 54;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->ping_ntile_98th(), output);
  }

  // optional uint32 jitter_histogram_negligible = 61;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->jitter_histogram_negligible(), output);
  }

  // optional uint32 jitter_histogram_1 = 62;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->jitter_histogram_1(), output);
  }

  // optional uint32 jitter_histogram_2 = 63;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(63, this->jitter_histogram_2(), output);
  }

  // optional uint32 jitter_histogram_5 = 64;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(64, this->jitter_histogram_5(), output);
  }

  // optional uint32 jitter_histogram_10 = 65;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->jitter_histogram_10(), output);
  }

  // optional uint32 jitter_histogram_20 = 66;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(66, this->jitter_histogram_20(), output);
  }

  // optional uint32 txspeed_max = 67;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(67, this->txspeed_max(), output);
  }

  // optional uint32 txspeed_histogram_16 = 68;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(68, this->txspeed_histogram_16(), output);
  }

  // optional uint32 txspeed_histogram_32 = 69;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(69, this->txspeed_histogram_32(), output);
  }

  // optional uint32 txspeed_histogram_64 = 70;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->txspeed_histogram_64(), output);
  }

  // optional uint32 txspeed_histogram_128 = 71;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->txspeed_histogram_128(), output);
  }

  // optional uint32 txspeed_histogram_256 = 72;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(72, this->txspeed_histogram_256(), output);
  }

  // optional uint32 txspeed_histogram_512 = 73;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(73, this->txspeed_histogram_512(), output);
  }

  // optional uint32 txspeed_histogram_1024 = 74;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(74, this->txspeed_histogram_1024(), output);
  }

  // optional uint32 txspeed_histogram_max = 75;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(75, this->txspeed_histogram_max(), output);
  }

  // optional uint32 txspeed_ntile_5th = 76;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(76, this->txspeed_ntile_5th(), output);
  }

  // optional uint32 txspeed_ntile_50th = 77;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(77, this->txspeed_ntile_50th(), output);
  }

  // optional uint32 txspeed_ntile_75th = 78;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(78, this->txspeed_ntile_75th(), output);
  }

  // optional uint32 txspeed_ntile_95th = 79;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(79, this->txspeed_ntile_95th(), output);
  }

  // optional uint32 txspeed_ntile_98th = 80;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(80, this->txspeed_ntile_98th(), output);
  }

  // optional uint32 rxspeed_max = 81;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(81, this->rxspeed_max(), output);
  }

  // optional uint32 rxspeed_histogram_16 = 82;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(82, this->rxspeed_histogram_16(), output);
  }

  // optional uint32 rxspeed_histogram_32 = 83;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(83, this->rxspeed_histogram_32(), output);
  }

  // optional uint32 rxspeed_histogram_64 = 84;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(84, this->rxspeed_histogram_64(), output);
  }

  // optional uint32 rxspeed_histogram_128 = 85;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(85, this->rxspeed_histogram_128(), output);
  }

  // optional uint32 rxspeed_histogram_256 = 86;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(86, this->rxspeed_histogram_256(), output);
  }

  // optional uint32 rxspeed_histogram_512 = 87;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(87, this->rxspeed_histogram_512(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 rxspeed_histogram_1024 = 88;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(88, this->rxspeed_histogram_1024(), output);
  }

  // optional uint32 rxspeed_histogram_max = 89;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(89, this->rxspeed_histogram_max(), output);
  }

  // optional uint32 rxspeed_ntile_5th = 90;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(90, this->rxspeed_ntile_5th(), output);
  }

  // optional uint32 rxspeed_ntile_50th = 91;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(91, this->rxspeed_ntile_50th(), output);
  }

  // optional uint32 rxspeed_ntile_75th = 92;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(92, this->rxspeed_ntile_75th(), output);
  }

  // optional uint32 rxspeed_ntile_95th = 93;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(93, this->rxspeed_ntile_95th(), output);
  }

  // optional uint32 rxspeed_ntile_98th = 94;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(94, this->rxspeed_ntile_98th(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramLinkLifetimeStats)
}

::google::protobuf::uint8* CMsgSteamDatagramLinkLifetimeStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramLinkLifetimeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 connected_seconds = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->connected_seconds(), target);
  }

  // optional uint64 packets_sent = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->packets_sent(), target);
  }

  // optional uint64 kb_sent = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->kb_sent(), target);
  }

  // optional uint64 packets_recv = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->packets_recv(), target);
  }

  // optional uint64 kb_recv = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->kb_recv(), target);
  }

  // optional uint64 packets_recv_sequenced = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->packets_recv_sequenced(), target);
  }

  // optional uint64 packets_recv_dropped = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->packets_recv_dropped(), target);
  }

  // optional uint64 packets_recv_out_of_order = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->packets_recv_out_of_order(), target);
  }

  // optional uint64 packets_recv_duplicate = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->packets_recv_duplicate(), target);
  }

  // optional uint64 packets_recv_lurch = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->packets_recv_lurch(), target);
  }

  // optional uint32 quality_histogram_100 = 21;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->quality_histogram_100(), target);
  }

  // optional uint32 quality_histogram_99 = 22;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->quality_histogram_99(), target);
  }

  // optional uint32 quality_histogram_97 = 23;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->quality_histogram_97(), target);
  }

  // optional uint32 quality_histogram_95 = 24;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->quality_histogram_95(), target);
  }

  // optional uint32 quality_histogram_90 = 25;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->quality_histogram_90(), target);
  }

  // optional uint32 quality_histogram_75 = 26;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->quality_histogram_75(), target);
  }

  // optional uint32 quality_histogram_50 = 27;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->quality_histogram_50(), target);
  }

  // optional uint32 quality_histogram_1 = 28;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->quality_histogram_1(), target);
  }

  // optional uint32 quality_histogram_dead = 29;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->quality_histogram_dead(), target);
  }

  // optional uint32 quality_ntile_2nd = 30;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->quality_ntile_2nd(), target);
  }

  // optional uint32 quality_ntile_5th = 31;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->quality_ntile_5th(), target);
  }

  // optional uint32 quality_ntile_25th = 32;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->quality_ntile_25th(), target);
  }

  // optional uint32 quality_ntile_50th = 33;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->quality_ntile_50th(), target);
  }

  // optional uint32 ping_histogram_25 = 41;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->ping_histogram_25(), target);
  }

  // optional uint32 ping_histogram_50 = 42;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->ping_histogram_50(), target);
  }

  // optional uint32 ping_histogram_75 = 43;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->ping_histogram_75(), target);
  }

  // optional uint32 ping_histogram_100 = 44;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->ping_histogram_100(), target);
  }

  // optional uint32 ping_histogram_125 = 45;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->ping_histogram_125(), target);
  }

  // optional uint32 ping_histogram_150 = 46;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->ping_histogram_150(), target);
  }

  // optional uint32 ping_histogram_200 = 47;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->ping_histogram_200(), target);
  }

  // optional uint32 ping_histogram_300 = 48;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->ping_histogram_300(), target);
  }

  // optional uint32 ping_histogram_max = 49;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->ping_histogram_max(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 ping_ntile_5th = 50;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->ping_ntile_5th(), target);
  }

  // optional uint32 ping_ntile_50th = 51;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->ping_ntile_50th(), target);
  }

  // optional uint32 ping_ntile_75th = 52;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->ping_ntile_75th(), target);
  }

  // optional uint32 ping_ntile_95th = 53;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->ping_ntile_95th(), target);
  }

  // optional uint32 ping_ntile_98th = 54;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->ping_ntile_98th(), target);
  }

  // optional uint32 jitter_histogram_negligible = 61;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->jitter_histogram_negligible(), target);
  }

  // optional uint32 jitter_histogram_1 = 62;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->jitter_histogram_1(), target);
  }

  // optional uint32 jitter_histogram_2 = 63;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(63, this->jitter_histogram_2(), target);
  }

  // optional uint32 jitter_histogram_5 = 64;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(64, this->jitter_histogram_5(), target);
  }

  // optional uint32 jitter_histogram_10 = 65;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(65, this->jitter_histogram_10(), target);
  }

  // optional uint32 jitter_histogram_20 = 66;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(66, this->jitter_histogram_20(), target);
  }

  // optional uint32 txspeed_max = 67;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(67, this->txspeed_max(), target);
  }

  // optional uint32 txspeed_histogram_16 = 68;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(68, this->txspeed_histogram_16(), target);
  }

  // optional uint32 txspeed_histogram_32 = 69;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(69, this->txspeed_histogram_32(), target);
  }

  // optional uint32 txspeed_histogram_64 = 70;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->txspeed_histogram_64(), target);
  }

  // optional uint32 txspeed_histogram_128 = 71;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(71, this->txspeed_histogram_128(), target);
  }

  // optional uint32 txspeed_histogram_256 = 72;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(72, this->txspeed_histogram_256(), target);
  }

  // optional uint32 txspeed_histogram_512 = 73;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(73, this->txspeed_histogram_512(), target);
  }

  // optional uint32 txspeed_histogram_1024 = 74;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(74, this->txspeed_histogram_1024(), target);
  }

  // optional uint32 txspeed_histogram_max = 75;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(75, this->txspeed_histogram_max(), target);
  }

  // optional uint32 txspeed_ntile_5th = 76;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(76, this->txspeed_ntile_5th(), target);
  }

  // optional uint32 txspeed_ntile_50th = 77;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(77, this->txspeed_ntile_50th(), target);
  }

  // optional uint32 txspeed_ntile_75th = 78;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(78, this->txspeed_ntile_75th(), target);
  }

  // optional uint32 txspeed_ntile_95th = 79;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(79, this->txspeed_ntile_95th(), target);
  }

  // optional uint32 txspeed_ntile_98th = 80;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(80, this->txspeed_ntile_98th(), target);
  }

  // optional uint32 rxspeed_max = 81;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(81, this->rxspeed_max(), target);
  }

  // optional uint32 rxspeed_histogram_16 = 82;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(82, this->rxspeed_histogram_16(), target);
  }

  // optional uint32 rxspeed_histogram_32 = 83;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(83, this->rxspeed_histogram_32(), target);
  }

  // optional uint32 rxspeed_histogram_64 = 84;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(84, this->rxspeed_histogram_64(), target);
  }

  // optional uint32 rxspeed_histogram_128 = 85;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(85, this->rxspeed_histogram_128(), target);
  }

  // optional uint32 rxspeed_histogram_256 = 86;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(86, this->rxspeed_histogram_256(), target);
  }

  // optional uint32 rxspeed_histogram_512 = 87;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(87, this->rxspeed_histogram_512(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 rxspeed_histogram_1024 = 88;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(88, this->rxspeed_histogram_1024(), target);
  }

  // optional uint32 rxspeed_histogram_max = 89;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(89, this->rxspeed_histogram_max(), target);
  }

  // optional uint32 rxspeed_ntile_5th = 90;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(90, this->rxspeed_ntile_5th(), target);
  }

  // optional uint32 rxspeed_ntile_50th = 91;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(91, this->rxspeed_ntile_50th(), target);
  }

  // optional uint32 rxspeed_ntile_75th = 92;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(92, this->rxspeed_ntile_75th(), target);
  }

  // optional uint32 rxspeed_ntile_95th = 93;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(93, this->rxspeed_ntile_95th(), target);
  }

  // optional uint32 rxspeed_ntile_98th = 94;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(94, this->rxspeed_ntile_98th(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramLinkLifetimeStats)
  return target;
}

size_t CMsgSteamDatagramLinkLifetimeStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramLinkLifetimeStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 packets_sent = 3;
    if (has_packets_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_sent());
    }

    // optional uint64 kb_sent = 4;
    if (has_kb_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kb_sent());
    }

    // optional uint64 packets_recv = 5;
    if (has_packets_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv());
    }

    // optional uint64 kb_recv = 6;
    if (has_kb_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kb_recv());
    }

    // optional uint64 packets_recv_sequenced = 7;
    if (has_packets_recv_sequenced()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_sequenced());
    }

    // optional uint64 packets_recv_dropped = 8;
    if (has_packets_recv_dropped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_dropped());
    }

    // optional uint64 packets_recv_out_of_order = 9;
    if (has_packets_recv_out_of_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_out_of_order());
    }

    // optional uint64 packets_recv_duplicate = 10;
    if (has_packets_recv_duplicate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_duplicate());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint64 packets_recv_lurch = 11;
    if (has_packets_recv_lurch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_lurch());
    }

    // optional uint32 connected_seconds = 2;
    if (has_connected_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connected_seconds());
    }

    // optional uint32 quality_histogram_100 = 21;
    if (has_quality_histogram_100()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_100());
    }

    // optional uint32 quality_histogram_99 = 22;
    if (has_quality_histogram_99()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_99());
    }

    // optional uint32 quality_histogram_97 = 23;
    if (has_quality_histogram_97()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_97());
    }

    // optional uint32 quality_histogram_95 = 24;
    if (has_quality_histogram_95()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_95());
    }

    // optional uint32 quality_histogram_90 = 25;
    if (has_quality_histogram_90()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_90());
    }

    // optional uint32 quality_histogram_75 = 26;
    if (has_quality_histogram_75()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_75());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 quality_histogram_50 = 27;
    if (has_quality_histogram_50()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_50());
    }

    // optional uint32 quality_histogram_1 = 28;
    if (has_quality_histogram_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_1());
    }

    // optional uint32 quality_histogram_dead = 29;
    if (has_quality_histogram_dead()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_dead());
    }

    // optional uint32 quality_ntile_2nd = 30;
    if (has_quality_ntile_2nd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_ntile_2nd());
    }

    // optional uint32 quality_ntile_5th = 31;
    if (has_quality_ntile_5th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_ntile_5th());
    }

    // optional uint32 quality_ntile_25th = 32;
    if (has_quality_ntile_25th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_ntile_25th());
    }

    // optional uint32 quality_ntile_50th = 33;
    if (has_quality_ntile_50th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_ntile_50th());
    }

    // optional uint32 ping_histogram_25 = 41;
    if (has_ping_histogram_25()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_25());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 ping_histogram_50 = 42;
    if (has_ping_histogram_50()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_50());
    }

    // optional uint32 ping_histogram_75 = 43;
    if (has_ping_histogram_75()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_75());
    }

    // optional uint32 ping_histogram_100 = 44;
    if (has_ping_histogram_100()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_100());
    }

    // optional uint32 ping_histogram_125 = 45;
    if (has_ping_histogram_125()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_125());
    }

    // optional uint32 ping_histogram_150 = 46;
    if (has_ping_histogram_150()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_150());
    }

    // optional uint32 ping_histogram_200 = 47;
    if (has_ping_histogram_200()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_200());
    }

    // optional uint32 ping_histogram_300 = 48;
    if (has_ping_histogram_300()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_300());
    }

    // optional uint32 ping_histogram_max = 49;
    if (has_ping_histogram_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_max());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional uint32 ping_ntile_5th = 50;
    if (has_ping_ntile_5th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_5th());
    }

    // optional uint32 ping_ntile_50th = 51;
    if (has_ping_ntile_50th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_50th());
    }

    // optional uint32 ping_ntile_75th = 52;
    if (has_ping_ntile_75th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_75th());
    }

    // optional uint32 ping_ntile_95th = 53;
    if (has_ping_ntile_95th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_95th());
    }

    // optional uint32 ping_ntile_98th = 54;
    if (has_ping_ntile_98th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_98th());
    }

    // optional uint32 jitter_histogram_negligible = 61;
    if (has_jitter_histogram_negligible()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_negligible());
    }

    // optional uint32 jitter_histogram_1 = 62;
    if (has_jitter_histogram_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_1());
    }

    // optional uint32 jitter_histogram_2 = 63;
    if (has_jitter_histogram_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_2());
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional uint32 jitter_histogram_5 = 64;
    if (has_jitter_histogram_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_5());
    }

    // optional uint32 jitter_histogram_10 = 65;
    if (has_jitter_histogram_10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_10());
    }

    // optional uint32 jitter_histogram_20 = 66;
    if (has_jitter_histogram_20()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_20());
    }

    // optional uint32 txspeed_max = 67;
    if (has_txspeed_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_max());
    }

    // optional uint32 txspeed_histogram_16 = 68;
    if (has_txspeed_histogram_16()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_16());
    }

    // optional uint32 txspeed_histogram_32 = 69;
    if (has_txspeed_histogram_32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_32());
    }

    // optional uint32 txspeed_histogram_64 = 70;
    if (has_txspeed_histogram_64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_64());
    }

    // optional uint32 txspeed_histogram_128 = 71;
    if (has_txspeed_histogram_128()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_128());
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional uint32 txspeed_histogram_256 = 72;
    if (has_txspeed_histogram_256()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_256());
    }

    // optional uint32 txspeed_histogram_512 = 73;
    if (has_txspeed_histogram_512()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_512());
    }

    // optional uint32 txspeed_histogram_1024 = 74;
    if (has_txspeed_histogram_1024()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_1024());
    }

    // optional uint32 txspeed_histogram_max = 75;
    if (has_txspeed_histogram_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_max());
    }

    // optional uint32 txspeed_ntile_5th = 76;
    if (has_txspeed_ntile_5th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_ntile_5th());
    }

    // optional uint32 txspeed_ntile_50th = 77;
    if (has_txspeed_ntile_50th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_ntile_50th());
    }

    // optional uint32 txspeed_ntile_75th = 78;
    if (has_txspeed_ntile_75th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_ntile_75th());
    }

    // optional uint32 txspeed_ntile_95th = 79;
    if (has_txspeed_ntile_95th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_ntile_95th());
    }

  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    // optional uint32 txspeed_ntile_98th = 80;
    if (has_txspeed_ntile_98th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_ntile_98th());
    }

    // optional uint32 rxspeed_max = 81;
    if (has_rxspeed_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_max());
    }

    // optional uint32 rxspeed_histogram_16 = 82;
    if (has_rxspeed_histogram_16()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_16());
    }

    // optional uint32 rxspeed_histogram_32 = 83;
    if (has_rxspeed_histogram_32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_32());
    }

    // optional uint32 rxspeed_histogram_64 = 84;
    if (has_rxspeed_histogram_64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_64());
    }

    // optional uint32 rxspeed_histogram_128 = 85;
    if (has_rxspeed_histogram_128()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_128());
    }

    // optional uint32 rxspeed_histogram_256 = 86;
    if (has_rxspeed_histogram_256()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_256());
    }

    // optional uint32 rxspeed_histogram_512 = 87;
    if (has_rxspeed_histogram_512()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_512());
    }

  }
  if (_has_bits_[64 / 32] & 127u) {
    // optional uint32 rxspeed_histogram_1024 = 88;
    if (has_rxspeed_histogram_1024()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_1024());
    }

    // optional uint32 rxspeed_histogram_max = 89;
    if (has_rxspeed_histogram_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_max());
    }

    // optional uint32 rxspeed_ntile_5th = 90;
    if (has_rxspeed_ntile_5th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_ntile_5th());
    }

    // optional uint32 rxspeed_ntile_50th = 91;
    if (has_rxspeed_ntile_50th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_ntile_50th());
    }

    // optional uint32 rxspeed_ntile_75th = 92;
    if (has_rxspeed_ntile_75th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_ntile_75th());
    }

    // optional uint32 rxspeed_ntile_95th = 93;
    if (has_rxspeed_ntile_95th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_ntile_95th());
    }

    // optional uint32 rxspeed_ntile_98th = 94;
    if (has_rxspeed_ntile_98th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_ntile_98th());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramLinkLifetimeStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramLinkLifetimeStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramLinkLifetimeStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramLinkLifetimeStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramLinkLifetimeStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramLinkLifetimeStats)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramLinkLifetimeStats::MergeFrom(const CMsgSteamDatagramLinkLifetimeStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramLinkLifetimeStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      packets_sent_ = from.packets_sent_;
    }
    if (cached_has_bits & 0x00000002u) {
      kb_sent_ = from.kb_sent_;
    }
    if (cached_has_bits & 0x00000004u) {
      packets_recv_ = from.packets_recv_;
    }
    if (cached_has_bits & 0x00000008u) {
      kb_recv_ = from.kb_recv_;
    }
    if (cached_has_bits & 0x00000010u) {
      packets_recv_sequenced_ = from.packets_recv_sequenced_;
    }
    if (cached_has_bits & 0x00000020u) {
      packets_recv_dropped_ = from.packets_recv_dropped_;
    }
    if (cached_has_bits & 0x00000040u) {
      packets_recv_out_of_order_ = from.packets_recv_out_of_order_;
    }
    if (cached_has_bits & 0x00000080u) {
      packets_recv_duplicate_ = from.packets_recv_duplicate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      packets_recv_lurch_ = from.packets_recv_lurch_;
    }
    if (cached_has_bits & 0x00000200u) {
      connected_seconds_ = from.connected_seconds_;
    }
    if (cached_has_bits & 0x00000400u) {
      quality_histogram_100_ = from.quality_histogram_100_;
    }
    if (cached_has_bits & 0x00000800u) {
      quality_histogram_99_ = from.quality_histogram_99_;
    }
    if (cached_has_bits & 0x00001000u) {
      quality_histogram_97_ = from.quality_histogram_97_;
    }
    if (cached_has_bits & 0x00002000u) {
      quality_histogram_95_ = from.quality_histogram_95_;
    }
    if (cached_has_bits & 0x00004000u) {
      quality_histogram_90_ = from.quality_histogram_90_;
    }
    if (cached_has_bits & 0x00008000u) {
      quality_histogram_75_ = from.quality_histogram_75_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      quality_histogram_50_ = from.quality_histogram_50_;
    }
    if (cached_has_bits & 0x00020000u) {
      quality_histogram_1_ = from.quality_histogram_1_;
    }
    if (cached_has_bits & 0x00040000u) {
      quality_histogram_dead_ = from.quality_histogram_dead_;
    }
    if (cached_has_bits & 0x00080000u) {
      quality_ntile_2nd_ = from.quality_ntile_2nd_;
    }
    if (cached_has_bits & 0x00100000u) {
      quality_ntile_5th_ = from.quality_ntile_5th_;
    }
    if (cached_has_bits & 0x00200000u) {
      quality_ntile_25th_ = from.quality_ntile_25th_;
    }
    if (cached_has_bits & 0x00400000u) {
      quality_ntile_50th_ = from.quality_ntile_50th_;
    }
    if (cached_has_bits & 0x00800000u) {
      ping_histogram_25_ = from.ping_histogram_25_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      ping_histogram_50_ = from.ping_histogram_50_;
    }
    if (cached_has_bits & 0x02000000u) {
      ping_histogram_75_ = from.ping_histogram_75_;
    }
    if (cached_has_bits & 0x04000000u) {
      ping_histogram_100_ = from.ping_histogram_100_;
    }
    if (cached_has_bits & 0x08000000u) {
      ping_histogram_125_ = from.ping_histogram_125_;
    }
    if (cached_has_bits & 0x10000000u) {
      ping_histogram_150_ = from.ping_histogram_150_;
    }
    if (cached_has_bits & 0x20000000u) {
      ping_histogram_200_ = from.ping_histogram_200_;
    }
    if (cached_has_bits & 0x40000000u) {
      ping_histogram_300_ = from.ping_histogram_300_;
    }
    if (cached_has_bits & 0x80000000u) {
      ping_histogram_max_ = from.ping_histogram_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      ping_ntile_5th_ = from.ping_ntile_5th_;
    }
    if (cached_has_bits & 0x00000002u) {
      ping_ntile_50th_ = from.ping_ntile_50th_;
    }
    if (cached_has_bits & 0x00000004u) {
      ping_ntile_75th_ = from.ping_ntile_75th_;
    }
    if (cached_has_bits & 0x00000008u) {
      ping_ntile_95th_ = from.ping_ntile_95th_;
    }
    if (cached_has_bits & 0x00000010u) {
      ping_ntile_98th_ = from.ping_ntile_98th_;
    }
    if (cached_has_bits & 0x00000020u) {
      jitter_histogram_negligible_ = from.jitter_histogram_negligible_;
    }
    if (cached_has_bits & 0x00000040u) {
      jitter_histogram_1_ = from.jitter_histogram_1_;
    }
    if (cached_has_bits & 0x00000080u) {
      jitter_histogram_2_ = from.jitter_histogram_2_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      jitter_histogram_5_ = from.jitter_histogram_5_;
    }
    if (cached_has_bits & 0x00000200u) {
      jitter_histogram_10_ = from.jitter_histogram_10_;
    }
    if (cached_has_bits & 0x00000400u) {
      jitter_histogram_20_ = from.jitter_histogram_20_;
    }
    if (cached_has_bits & 0x00000800u) {
      txspeed_max_ = from.txspeed_max_;
    }
    if (cached_has_bits & 0x00001000u) {
      txspeed_histogram_16_ = from.txspeed_histogram_16_;
    }
    if (cached_has_bits & 0x00002000u) {
      txspeed_histogram_32_ = from.txspeed_histogram_32_;
    }
    if (cached_has_bits & 0x00004000u) {
      txspeed_histogram_64_ = from.txspeed_histogram_64_;
    }
    if (cached_has_bits & 0x00008000u) {
      txspeed_histogram_128_ = from.txspeed_histogram_128_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      txspeed_histogram_256_ = from.txspeed_histogram_256_;
    }
    if (cached_has_bits & 0x00020000u) {
      txspeed_histogram_512_ = from.txspeed_histogram_512_;
    }
    if (cached_has_bits & 0x00040000u) {
      txspeed_histogram_1024_ = from.txspeed_histogram_1024_;
    }
    if (cached_has_bits & 0x00080000u) {
      txspeed_histogram_max_ = from.txspeed_histogram_max_;
    }
    if (cached_has_bits & 0x00100000u) {
      txspeed_ntile_5th_ = from.txspeed_ntile_5th_;
    }
    if (cached_has_bits & 0x00200000u) {
      txspeed_ntile_50th_ = from.txspeed_ntile_50th_;
    }
    if (cached_has_bits & 0x00400000u) {
      txspeed_ntile_75th_ = from.txspeed_ntile_75th_;
    }
    if (cached_has_bits & 0x00800000u) {
      txspeed_ntile_95th_ = from.txspeed_ntile_95th_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      txspeed_ntile_98th_ = from.txspeed_ntile_98th_;
    }
    if (cached_has_bits & 0x02000000u) {
      rxspeed_max_ = from.rxspeed_max_;
    }
    if (cached_has_bits & 0x04000000u) {
      rxspeed_histogram_16_ = from.rxspeed_histogram_16_;
    }
    if (cached_has_bits & 0x08000000u) {
      rxspeed_histogram_32_ = from.rxspeed_histogram_32_;
    }
    if (cached_has_bits & 0x10000000u) {
      rxspeed_histogram_64_ = from.rxspeed_histogram_64_;
    }
    if (cached_has_bits & 0x20000000u) {
      rxspeed_histogram_128_ = from.rxspeed_histogram_128_;
    }
    if (cached_has_bits & 0x40000000u) {
      rxspeed_histogram_256_ = from.rxspeed_histogram_256_;
    }
    if (cached_has_bits & 0x80000000u) {
      rxspeed_histogram_512_ = from.rxspeed_histogram_512_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      rxspeed_histogram_1024_ = from.rxspeed_histogram_1024_;
    }
    if (cached_has_bits & 0x00000002u) {
      rxspeed_histogram_max_ = from.rxspeed_histogram_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      rxspeed_ntile_5th_ = from.rxspeed_ntile_5th_;
    }
    if (cached_has_bits & 0x00000008u) {
      rxspeed_ntile_50th_ = from.rxspeed_ntile_50th_;
    }
    if (cached_has_bits & 0x00000010u) {
      rxspeed_ntile_75th_ = from.rxspeed_ntile_75th_;
    }
    if (cached_has_bits & 0x00000020u) {
      rxspeed_ntile_95th_ = from.rxspeed_ntile_95th_;
    }
    if (cached_has_bits & 0x00000040u) {
      rxspeed_ntile_98th_ = from.rxspeed_ntile_98th_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void CMsgSteamDatagramLinkLifetimeStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramLinkLifetimeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramLinkLifetimeStats::CopyFrom(const CMsgSteamDatagramLinkLifetimeStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramLinkLifetimeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramLinkLifetimeStats::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramLinkLifetimeStats::Swap(CMsgSteamDatagramLinkLifetimeStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramLinkLifetimeStats::InternalSwap(CMsgSteamDatagramLinkLifetimeStats* other) {
  using std::swap;
  swap(packets_sent_, other->packets_sent_);
  swap(kb_sent_, other->kb_sent_);
  swap(packets_recv_, other->packets_recv_);
  swap(kb_recv_, other->kb_recv_);
  swap(packets_recv_sequenced_, other->packets_recv_sequenced_);
  swap(packets_recv_dropped_, other->packets_recv_dropped_);
  swap(packets_recv_out_of_order_, other->packets_recv_out_of_order_);
  swap(packets_recv_duplicate_, other->packets_recv_duplicate_);
  swap(packets_recv_lurch_, other->packets_recv_lurch_);
  swap(connected_seconds_, other->connected_seconds_);
  swap(quality_histogram_100_, other->quality_histogram_100_);
  swap(quality_histogram_99_, other->quality_histogram_99_);
  swap(quality_histogram_97_, other->quality_histogram_97_);
  swap(quality_histogram_95_, other->quality_histogram_95_);
  swap(quality_histogram_90_, other->quality_histogram_90_);
  swap(quality_histogram_75_, other->quality_histogram_75_);
  swap(quality_histogram_50_, other->quality_histogram_50_);
  swap(quality_histogram_1_, other->quality_histogram_1_);
  swap(quality_histogram_dead_, other->quality_histogram_dead_);
  swap(quality_ntile_2nd_, other->quality_ntile_2nd_);
  swap(quality_ntile_5th_, other->quality_ntile_5th_);
  swap(quality_ntile_25th_, other->quality_ntile_25th_);
  swap(quality_ntile_50th_, other->quality_ntile_50th_);
  swap(ping_histogram_25_, other->ping_histogram_25_);
  swap(ping_histogram_50_, other->ping_histogram_50_);
  swap(ping_histogram_75_, other->ping_histogram_75_);
  swap(ping_histogram_100_, other->ping_histogram_100_);
  swap(ping_histogram_125_, other->ping_histogram_125_);
  swap(ping_histogram_150_, other->ping_histogram_150_);
  swap(ping_histogram_200_, other->ping_histogram_200_);
  swap(ping_histogram_300_, other->ping_histogram_300_);
  swap(ping_histogram_max_, other->ping_histogram_max_);
  swap(ping_ntile_5th_, other->ping_ntile_5th_);
  swap(ping_ntile_50th_, other->ping_ntile_50th_);
  swap(ping_ntile_75th_, other->ping_ntile_75th_);
  swap(ping_ntile_95th_, other->ping_ntile_95th_);
  swap(ping_ntile_98th_, other->ping_ntile_98th_);
  swap(jitter_histogram_negligible_, other->jitter_histogram_negligible_);
  swap(jitter_histogram_1_, other->jitter_histogram_1_);
  swap(jitter_histogram_2_, other->jitter_histogram_2_);
  swap(jitter_histogram_5_, other->jitter_histogram_5_);
  swap(jitter_histogram_10_, other->jitter_histogram_10_);
  swap(jitter_histogram_20_, other->jitter_histogram_20_);
  swap(txspeed_max_, other->txspeed_max_);
  swap(txspeed_histogram_16_, other->txspeed_histogram_16_);
  swap(txspeed_histogram_32_, other->txspeed_histogram_32_);
  swap(txspeed_histogram_64_, other->txspeed_histogram_64_);
  swap(txspeed_histogram_128_, other->txspeed_histogram_128_);
  swap(txspeed_histogram_256_, other->txspeed_histogram_256_);
  swap(txspeed_histogram_512_, other->txspeed_histogram_512_);
  swap(txspeed_histogram_1024_, other->txspeed_histogram_1024_);
  swap(txspeed_histogram_max_, other->txspeed_histogram_max_);
  swap(txspeed_ntile_5th_, other->txspeed_ntile_5th_);
  swap(txspeed_ntile_50th_, other->txspeed_ntile_50th_);
  swap(txspeed_ntile_75th_, other->txspeed_ntile_75th_);
  swap(txspeed_ntile_95th_, other->txspeed_ntile_95th_);
  swap(txspeed_ntile_98th_, other->txspeed_ntile_98th_);
  swap(rxspeed_max_, other->rxspeed_max_);
  swap(rxspeed_histogram_16_, other->rxspeed_histogram_16_);
  swap(rxspeed_histogram_32_, other->rxspeed_histogram_32_);
  swap(rxspeed_histogram_64_, other->rxspeed_histogram_64_);
  swap(rxspeed_histogram_128_, other->rxspeed_histogram_128_);
  swap(rxspeed_histogram_256_, other->rxspeed_histogram_256_);
  swap(rxspeed_histogram_512_, other->rxspeed_histogram_512_);
  swap(rxspeed_histogram_1024_, other->rxspeed_histogram_1024_);
  swap(rxspeed_histogram_max_, other->rxspeed_histogram_max_);
  swap(rxspeed_ntile_5th_, other->rxspeed_ntile_5th_);
  swap(rxspeed_ntile_50th_, other->rxspeed_ntile_50th_);
  swap(rxspeed_ntile_75th_, other->rxspeed_ntile_75th_);
  swap(rxspeed_ntile_95th_, other->rxspeed_ntile_95th_);
  swap(rxspeed_ntile_98th_, other->rxspeed_ntile_98th_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramLinkLifetimeStats::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramConnectionQuality::InitAsDefaultInstance() {
  ::_CMsgSteamDatagramConnectionQuality_default_instance_._instance.get_mutable()->instantaneous_ = const_cast< ::CMsgSteamDatagramLinkInstantaneousStats*>(
      ::CMsgSteamDatagramLinkInstantaneousStats::internal_default_instance());
  ::_CMsgSteamDatagramConnectionQuality_default_instance_._instance.get_mutable()->lifetime_ = const_cast< ::CMsgSteamDatagramLinkLifetimeStats*>(
      ::CMsgSteamDatagramLinkLifetimeStats::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramConnectionQuality::kInstantaneousFieldNumber;
const int CMsgSteamDatagramConnectionQuality::kLifetimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramConnectionQuality::CMsgSteamDatagramConnectionQuality()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramConnectionQuality();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramConnectionQuality)
}
CMsgSteamDatagramConnectionQuality::CMsgSteamDatagramConnectionQuality(const CMsgSteamDatagramConnectionQuality& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_instantaneous()) {
    instantaneous_ = new ::CMsgSteamDatagramLinkInstantaneousStats(*from.instantaneous_);
  } else {
    instantaneous_ = NULL;
  }
  if (from.has_lifetime()) {
    lifetime_ = new ::CMsgSteamDatagramLinkLifetimeStats(*from.lifetime_);
  } else {
    lifetime_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionQuality)
}

void CMsgSteamDatagramConnectionQuality::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&instantaneous_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lifetime_) -
      reinterpret_cast<char*>(&instantaneous_)) + sizeof(lifetime_));
}

CMsgSteamDatagramConnectionQuality::~CMsgSteamDatagramConnectionQuality() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionQuality)
  SharedDtor();
}

void CMsgSteamDatagramConnectionQuality::SharedDtor() {
  if (this != internal_default_instance()) delete instantaneous_;
  if (this != internal_default_instance()) delete lifetime_;
}

void CMsgSteamDatagramConnectionQuality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionQuality::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionQuality::default_instance() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramConnectionQuality();
  return *internal_default_instance();
}

CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionQuality::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramConnectionQuality* n = new CMsgSteamDatagramConnectionQuality;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramConnectionQuality::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionQuality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(instantaneous_ != NULL);
      instantaneous_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lifetime_ != NULL);
      lifetime_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramConnectionQuality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramConnectionQuality)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_instantaneous()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lifetime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramConnectionQuality)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramConnectionQuality)
  return false;
#undef DO_
}

void CMsgSteamDatagramConnectionQuality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramConnectionQuality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->instantaneous_, output);
  }

  // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lifetime_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramConnectionQuality)
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionQuality::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionQuality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->instantaneous_, deterministic, target);
  }

  // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->lifetime_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionQuality)
  return target;
}

size_t CMsgSteamDatagramConnectionQuality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionQuality)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
    if (has_instantaneous()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->instantaneous_);
    }

    // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
    if (has_lifetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->lifetime_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectionQuality::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramConnectionQuality)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionQuality* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramConnectionQuality>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramConnectionQuality)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramConnectionQuality)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionQuality::MergeFrom(const CMsgSteamDatagramConnectionQuality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionQuality)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_instantaneous()->::CMsgSteamDatagramLinkInstantaneousStats::MergeFrom(from.instantaneous());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lifetime()->::CMsgSteamDatagramLinkLifetimeStats::MergeFrom(from.lifetime());
    }
  }
}

void CMsgSteamDatagramConnectionQuality::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramConnectionQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionQuality::CopyFrom(const CMsgSteamDatagramConnectionQuality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionQuality::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionQuality::Swap(CMsgSteamDatagramConnectionQuality* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramConnectionQuality::InternalSwap(CMsgSteamDatagramConnectionQuality* other) {
  using std::swap;
  swap(instantaneous_, other->instantaneous_);
  swap(lifetime_, other->lifetime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionQuality::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgICERendezvous_Auth::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgICERendezvous_Auth::kPwdFragFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgICERendezvous_Auth::CMsgICERendezvous_Auth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgICERendezvous_Auth();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgICERendezvous.Auth)
}
CMsgICERendezvous_Auth::CMsgICERendezvous_Auth(const CMsgICERendezvous_Auth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pwd_frag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pwd_frag()) {
    pwd_frag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_frag_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgICERendezvous.Auth)
}

void CMsgICERendezvous_Auth::SharedCtor() {
  _cached_size_ = 0;
  pwd_frag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgICERendezvous_Auth::~CMsgICERendezvous_Auth() {
  // @@protoc_insertion_point(destructor:CMsgICERendezvous.Auth)
  SharedDtor();
}

void CMsgICERendezvous_Auth::SharedDtor() {
  pwd_frag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgICERendezvous_Auth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgICERendezvous_Auth::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgICERendezvous_Auth& CMsgICERendezvous_Auth::default_instance() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgICERendezvous_Auth();
  return *internal_default_instance();
}

CMsgICERendezvous_Auth* CMsgICERendezvous_Auth::New(::google::protobuf::Arena* arena) const {
  CMsgICERendezvous_Auth* n = new CMsgICERendezvous_Auth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgICERendezvous_Auth::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgICERendezvous.Auth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!pwd_frag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*pwd_frag_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgICERendezvous_Auth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgICERendezvous.Auth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pwd_frag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd_frag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd_frag().data(), static_cast<int>(this->pwd_frag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgICERendezvous.Auth.pwd_frag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgICERendezvous.Auth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgICERendezvous.Auth)
  return false;
#undef DO_
}

void CMsgICERendezvous_Auth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgICERendezvous.Auth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pwd_frag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd_frag().data(), static_cast<int>(this->pwd_frag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgICERendezvous.Auth.pwd_frag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pwd_frag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgICERendezvous.Auth)
}

::google::protobuf::uint8* CMsgICERendezvous_Auth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgICERendezvous.Auth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pwd_frag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd_frag().data(), static_cast<int>(this->pwd_frag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgICERendezvous.Auth.pwd_frag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pwd_frag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgICERendezvous.Auth)
  return target;
}

size_t CMsgICERendezvous_Auth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgICERendezvous.Auth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string pwd_frag = 1;
  if (has_pwd_frag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pwd_frag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgICERendezvous_Auth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgICERendezvous.Auth)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgICERendezvous_Auth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgICERendezvous_Auth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgICERendezvous.Auth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgICERendezvous.Auth)
    MergeFrom(*source);
  }
}

void CMsgICERendezvous_Auth::MergeFrom(const CMsgICERendezvous_Auth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgICERendezvous.Auth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pwd_frag()) {
    set_has_pwd_frag();
    pwd_frag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_frag_);
  }
}

void CMsgICERendezvous_Auth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgICERendezvous.Auth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgICERendezvous_Auth::CopyFrom(const CMsgICERendezvous_Auth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgICERendezvous.Auth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgICERendezvous_Auth::IsInitialized() const {
  return true;
}

void CMsgICERendezvous_Auth::Swap(CMsgICERendezvous_Auth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgICERendezvous_Auth::InternalSwap(CMsgICERendezvous_Auth* other) {
  using std::swap;
  pwd_frag_.Swap(&other->pwd_frag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgICERendezvous_Auth::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgICERendezvous_Candidate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgICERendezvous_Candidate::kCandidateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgICERendezvous_Candidate::CMsgICERendezvous_Candidate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgICERendezvous_Candidate();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgICERendezvous.Candidate)
}
CMsgICERendezvous_Candidate::CMsgICERendezvous_Candidate(const CMsgICERendezvous_Candidate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  candidate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_candidate()) {
    candidate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.candidate_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgICERendezvous.Candidate)
}

void CMsgICERendezvous_Candidate::SharedCtor() {
  _cached_size_ = 0;
  candidate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgICERendezvous_Candidate::~CMsgICERendezvous_Candidate() {
  // @@protoc_insertion_point(destructor:CMsgICERendezvous.Candidate)
  SharedDtor();
}

void CMsgICERendezvous_Candidate::SharedDtor() {
  candidate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgICERendezvous_Candidate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgICERendezvous_Candidate::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgICERendezvous_Candidate& CMsgICERendezvous_Candidate::default_instance() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgICERendezvous_Candidate();
  return *internal_default_instance();
}

CMsgICERendezvous_Candidate* CMsgICERendezvous_Candidate::New(::google::protobuf::Arena* arena) const {
  CMsgICERendezvous_Candidate* n = new CMsgICERendezvous_Candidate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgICERendezvous_Candidate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgICERendezvous.Candidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!candidate_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*candidate_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgICERendezvous_Candidate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgICERendezvous.Candidate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string candidate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_candidate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->candidate().data(), static_cast<int>(this->candidate().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgICERendezvous.Candidate.candidate");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgICERendezvous.Candidate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgICERendezvous.Candidate)
  return false;
#undef DO_
}

void CMsgICERendezvous_Candidate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgICERendezvous.Candidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string candidate = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->candidate().data(), static_cast<int>(this->candidate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgICERendezvous.Candidate.candidate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->candidate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgICERendezvous.Candidate)
}

::google::protobuf::uint8* CMsgICERendezvous_Candidate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgICERendezvous.Candidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string candidate = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->candidate().data(), static_cast<int>(this->candidate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgICERendezvous.Candidate.candidate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->candidate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgICERendezvous.Candidate)
  return target;
}

size_t CMsgICERendezvous_Candidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgICERendezvous.Candidate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string candidate = 3;
  if (has_candidate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->candidate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgICERendezvous_Candidate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgICERendezvous.Candidate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgICERendezvous_Candidate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgICERendezvous_Candidate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgICERendezvous.Candidate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgICERendezvous.Candidate)
    MergeFrom(*source);
  }
}

void CMsgICERendezvous_Candidate::MergeFrom(const CMsgICERendezvous_Candidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgICERendezvous.Candidate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_candidate()) {
    set_has_candidate();
    candidate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.candidate_);
  }
}

void CMsgICERendezvous_Candidate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgICERendezvous.Candidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgICERendezvous_Candidate::CopyFrom(const CMsgICERendezvous_Candidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgICERendezvous.Candidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgICERendezvous_Candidate::IsInitialized() const {
  return true;
}

void CMsgICERendezvous_Candidate::Swap(CMsgICERendezvous_Candidate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgICERendezvous_Candidate::InternalSwap(CMsgICERendezvous_Candidate* other) {
  using std::swap;
  candidate_.Swap(&other->candidate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgICERendezvous_Candidate::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgICERendezvous::InitAsDefaultInstance() {
  ::_CMsgICERendezvous_default_instance_._instance.get_mutable()->auth_ = const_cast< ::CMsgICERendezvous_Auth*>(
      ::CMsgICERendezvous_Auth::internal_default_instance());
  ::_CMsgICERendezvous_default_instance_._instance.get_mutable()->add_candidate_ = const_cast< ::CMsgICERendezvous_Candidate*>(
      ::CMsgICERendezvous_Candidate::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgICERendezvous::kAuthFieldNumber;
const int CMsgICERendezvous::kAddCandidateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgICERendezvous::CMsgICERendezvous()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgICERendezvous();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgICERendezvous)
}
CMsgICERendezvous::CMsgICERendezvous(const CMsgICERendezvous& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_add_candidate()) {
    add_candidate_ = new ::CMsgICERendezvous_Candidate(*from.add_candidate_);
  } else {
    add_candidate_ = NULL;
  }
  if (from.has_auth()) {
    auth_ = new ::CMsgICERendezvous_Auth(*from.auth_);
  } else {
    auth_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgICERendezvous)
}

void CMsgICERendezvous::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&add_candidate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auth_) -
      reinterpret_cast<char*>(&add_candidate_)) + sizeof(auth_));
}

CMsgICERendezvous::~CMsgICERendezvous() {
  // @@protoc_insertion_point(destructor:CMsgICERendezvous)
  SharedDtor();
}

void CMsgICERendezvous::SharedDtor() {
  if (this != internal_default_instance()) delete add_candidate_;
  if (this != internal_default_instance()) delete auth_;
}

void CMsgICERendezvous::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgICERendezvous::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgICERendezvous& CMsgICERendezvous::default_instance() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgICERendezvous();
  return *internal_default_instance();
}

CMsgICERendezvous* CMsgICERendezvous::New(::google::protobuf::Arena* arena) const {
  CMsgICERendezvous* n = new CMsgICERendezvous;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgICERendezvous::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgICERendezvous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(add_candidate_ != NULL);
      add_candidate_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(auth_ != NULL);
      auth_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgICERendezvous::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgICERendezvous)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgICERendezvous.Candidate add_candidate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_candidate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgICERendezvous.Auth auth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgICERendezvous)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgICERendezvous)
  return false;
#undef DO_
}

void CMsgICERendezvous::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgICERendezvous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgICERendezvous.Candidate add_candidate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->add_candidate_, output);
  }

  // optional .CMsgICERendezvous.Auth auth = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->auth_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgICERendezvous)
}

::google::protobuf::uint8* CMsgICERendezvous::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgICERendezvous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgICERendezvous.Candidate add_candidate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->add_candidate_, deterministic, target);
  }

  // optional .CMsgICERendezvous.Auth auth = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->auth_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgICERendezvous)
  return target;
}

size_t CMsgICERendezvous::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgICERendezvous)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .CMsgICERendezvous.Candidate add_candidate = 1;
    if (has_add_candidate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->add_candidate_);
    }

    // optional .CMsgICERendezvous.Auth auth = 2;
    if (has_auth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->auth_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgICERendezvous::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgICERendezvous)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgICERendezvous* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgICERendezvous>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgICERendezvous)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgICERendezvous)
    MergeFrom(*source);
  }
}

void CMsgICERendezvous::MergeFrom(const CMsgICERendezvous& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgICERendezvous)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_add_candidate()->::CMsgICERendezvous_Candidate::MergeFrom(from.add_candidate());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_auth()->::CMsgICERendezvous_Auth::MergeFrom(from.auth());
    }
  }
}

void CMsgICERendezvous::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgICERendezvous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgICERendezvous::CopyFrom(const CMsgICERendezvous& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgICERendezvous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgICERendezvous::IsInitialized() const {
  return true;
}

void CMsgICERendezvous::Swap(CMsgICERendezvous* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgICERendezvous::InternalSwap(CMsgICERendezvous* other) {
  using std::swap;
  swap(add_candidate_, other->add_candidate_);
  swap(auth_, other->auth_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgICERendezvous::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::InitAsDefaultInstance() {
  ::_CMsgSteamNetworkingP2PRendezvous_ConnectRequest_default_instance_._instance.get_mutable()->crypt_ = const_cast< ::CMsgSteamDatagramSessionCryptInfoSigned*>(
      ::CMsgSteamDatagramSessionCryptInfoSigned::internal_default_instance());
  ::_CMsgSteamNetworkingP2PRendezvous_ConnectRequest_default_instance_._instance.get_mutable()->cert_ = const_cast< ::CMsgSteamDatagramCertificateSigned*>(
      ::CMsgSteamDatagramCertificateSigned::internal_default_instance());
}
void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::clear_cert() {
  if (cert_ != NULL) cert_->Clear();
  clear_has_cert();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamNetworkingP2PRendezvous_ConnectRequest::kCryptFieldNumber;
const int CMsgSteamNetworkingP2PRendezvous_ConnectRequest::kCertFieldNumber;
const int CMsgSteamNetworkingP2PRendezvous_ConnectRequest::kToVirtualPortFieldNumber;
const int CMsgSteamNetworkingP2PRendezvous_ConnectRequest::kFromVirtualPortFieldNumber;
const int CMsgSteamNetworkingP2PRendezvous_ConnectRequest::kFromFakeipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamNetworkingP2PRendezvous_ConnectRequest::CMsgSteamNetworkingP2PRendezvous_ConnectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamNetworkingP2PRendezvous_ConnectRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
}
CMsgSteamNetworkingP2PRendezvous_ConnectRequest::CMsgSteamNetworkingP2PRendezvous_ConnectRequest(const CMsgSteamNetworkingP2PRendezvous_ConnectRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_fakeip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_fakeip()) {
    from_fakeip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_fakeip_);
  }
  if (from.has_crypt()) {
    crypt_ = new ::CMsgSteamDatagramSessionCryptInfoSigned(*from.crypt_);
  } else {
    crypt_ = NULL;
  }
  if (from.has_cert()) {
    cert_ = new ::CMsgSteamDatagramCertificateSigned(*from.cert_);
  } else {
    cert_ = NULL;
  }
  ::memcpy(&to_virtual_port_, &from.to_virtual_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_virtual_port_) -
    reinterpret_cast<char*>(&to_virtual_port_)) + sizeof(from_virtual_port_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
}

void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::SharedCtor() {
  _cached_size_ = 0;
  from_fakeip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&crypt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_virtual_port_) -
      reinterpret_cast<char*>(&crypt_)) + sizeof(from_virtual_port_));
}

CMsgSteamNetworkingP2PRendezvous_ConnectRequest::~CMsgSteamNetworkingP2PRendezvous_ConnectRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  SharedDtor();
}

void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::SharedDtor() {
  from_fakeip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete crypt_;
  if (this != internal_default_instance()) delete cert_;
}

void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamNetworkingP2PRendezvous_ConnectRequest::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamNetworkingP2PRendezvous_ConnectRequest& CMsgSteamNetworkingP2PRendezvous_ConnectRequest::default_instance() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamNetworkingP2PRendezvous_ConnectRequest();
  return *internal_default_instance();
}

CMsgSteamNetworkingP2PRendezvous_ConnectRequest* CMsgSteamNetworkingP2PRendezvous_ConnectRequest::New(::google::protobuf::Arena* arena) const {
  CMsgSteamNetworkingP2PRendezvous_ConnectRequest* n = new CMsgSteamNetworkingP2PRendezvous_ConnectRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!from_fakeip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*from_fakeip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(crypt_ != NULL);
      crypt_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cert_ != NULL);
      cert_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&to_virtual_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_virtual_port_) -
        reinterpret_cast<char*>(&to_virtual_port_)) + sizeof(from_virtual_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamNetworkingP2PRendezvous_ConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crypt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamDatagramCertificateSigned cert = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 to_virtual_port = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_to_virtual_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_virtual_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 from_virtual_port = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_from_virtual_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_virtual_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string from_fakeip = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_fakeip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_fakeip().data(), static_cast<int>(this->from_fakeip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgSteamNetworkingP2PRendezvous.ConnectRequest.from_fakeip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  return false;
#undef DO_
}

void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->crypt_, output);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->cert_, output);
  }

  // optional uint32 to_virtual_port = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->to_virtual_port(), output);
  }

  // optional uint32 from_virtual_port = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->from_virtual_port(), output);
  }

  // optional string from_fakeip = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_fakeip().data(), static_cast<int>(this->from_fakeip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamNetworkingP2PRendezvous.ConnectRequest.from_fakeip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->from_fakeip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
}

::google::protobuf::uint8* CMsgSteamNetworkingP2PRendezvous_ConnectRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->crypt_, deterministic, target);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->cert_, deterministic, target);
  }

  // optional uint32 to_virtual_port = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->to_virtual_port(), target);
  }

  // optional uint32 from_virtual_port = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->from_virtual_port(), target);
  }

  // optional string from_fakeip = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_fakeip().data(), static_cast<int>(this->from_fakeip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamNetworkingP2PRendezvous.ConnectRequest.from_fakeip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->from_fakeip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  return target;
}

size_t CMsgSteamNetworkingP2PRendezvous_ConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string from_fakeip = 11;
    if (has_from_fakeip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_fakeip());
    }

    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
    if (has_crypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->crypt_);
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 7;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->cert_);
    }

    // optional uint32 to_virtual_port = 9;
    if (has_to_virtual_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_virtual_port());
    }

    // optional uint32 from_virtual_port = 10;
    if (has_from_virtual_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_virtual_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamNetworkingP2PRendezvous_ConnectRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamNetworkingP2PRendezvous_ConnectRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
    MergeFrom(*source);
  }
}

void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::MergeFrom(const CMsgSteamNetworkingP2PRendezvous_ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_from_fakeip();
      from_fakeip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_fakeip_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_crypt()->::CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(from.crypt());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(from.cert());
    }
    if (cached_has_bits & 0x00000008u) {
      to_virtual_port_ = from.to_virtual_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      from_virtual_port_ = from.from_virtual_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::CopyFrom(const CMsgSteamNetworkingP2PRendezvous_ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamNetworkingP2PRendezvous_ConnectRequest::IsInitialized() const {
  return true;
}

void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::Swap(CMsgSteamNetworkingP2PRendezvous_ConnectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::InternalSwap(CMsgSteamNetworkingP2PRendezvous_ConnectRequest* other) {
  using std::swap;
  from_fakeip_.Swap(&other->from_fakeip_);
  swap(crypt_, other->crypt_);
  swap(cert_, other->cert_);
  swap(to_virtual_port_, other->to_virtual_port_);
  swap(from_virtual_port_, other->from_virtual_port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamNetworkingP2PRendezvous_ConnectRequest::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamNetworkingP2PRendezvous_ConnectOK::InitAsDefaultInstance() {
  ::_CMsgSteamNetworkingP2PRendezvous_ConnectOK_default_instance_._instance.get_mutable()->crypt_ = const_cast< ::CMsgSteamDatagramSessionCryptInfoSigned*>(
      ::CMsgSteamDatagramSessionCryptInfoSigned::internal_default_instance());
  ::_CMsgSteamNetworkingP2PRendezvous_ConnectOK_default_instance_._instance.get_mutable()->cert_ = const_cast< ::CMsgSteamDatagramCertificateSigned*>(
      ::CMsgSteamDatagramCertificateSigned::internal_default_instance());
}
void CMsgSteamNetworkingP2PRendezvous_ConnectOK::clear_cert() {
  if (cert_ != NULL) cert_->Clear();
  clear_has_cert();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamNetworkingP2PRendezvous_ConnectOK::kCryptFieldNumber;
const int CMsgSteamNetworkingP2PRendezvous_ConnectOK::kCertFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamNetworkingP2PRendezvous_ConnectOK::CMsgSteamNetworkingP2PRendezvous_ConnectOK()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamNetworkingP2PRendezvous_ConnectOK();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
}
CMsgSteamNetworkingP2PRendezvous_ConnectOK::CMsgSteamNetworkingP2PRendezvous_ConnectOK(const CMsgSteamNetworkingP2PRendezvous_ConnectOK& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_crypt()) {
    crypt_ = new ::CMsgSteamDatagramSessionCryptInfoSigned(*from.crypt_);
  } else {
    crypt_ = NULL;
  }
  if (from.has_cert()) {
    cert_ = new ::CMsgSteamDatagramCertificateSigned(*from.cert_);
  } else {
    cert_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
}

void CMsgSteamNetworkingP2PRendezvous_ConnectOK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&crypt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cert_) -
      reinterpret_cast<char*>(&crypt_)) + sizeof(cert_));
}

CMsgSteamNetworkingP2PRendezvous_ConnectOK::~CMsgSteamNetworkingP2PRendezvous_ConnectOK() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  SharedDtor();
}

void CMsgSteamNetworkingP2PRendezvous_ConnectOK::SharedDtor() {
  if (this != internal_default_instance()) delete crypt_;
  if (this != internal_default_instance()) delete cert_;
}

void CMsgSteamNetworkingP2PRendezvous_ConnectOK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamNetworkingP2PRendezvous_ConnectOK::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamNetworkingP2PRendezvous_ConnectOK& CMsgSteamNetworkingP2PRendezvous_ConnectOK::default_instance() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamNetworkingP2PRendezvous_ConnectOK();
  return *internal_default_instance();
}

CMsgSteamNetworkingP2PRendezvous_ConnectOK* CMsgSteamNetworkingP2PRendezvous_ConnectOK::New(::google::protobuf::Arena* arena) const {
  CMsgSteamNetworkingP2PRendezvous_ConnectOK* n = new CMsgSteamNetworkingP2PRendezvous_ConnectOK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamNetworkingP2PRendezvous_ConnectOK::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(crypt_ != NULL);
      crypt_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cert_ != NULL);
      cert_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamNetworkingP2PRendezvous_ConnectOK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crypt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamDatagramCertificateSigned cert = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  return false;
#undef DO_
}

void CMsgSteamNetworkingP2PRendezvous_ConnectOK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->crypt_, output);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->cert_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
}

::google::protobuf::uint8* CMsgSteamNetworkingP2PRendezvous_ConnectOK::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->crypt_, deterministic, target);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->cert_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  return target;
}

size_t CMsgSteamNetworkingP2PRendezvous_ConnectOK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
    if (has_crypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->crypt_);
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 6;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->cert_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamNetworkingP2PRendezvous_ConnectOK::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamNetworkingP2PRendezvous_ConnectOK* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamNetworkingP2PRendezvous_ConnectOK>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
    MergeFrom(*source);
  }
}

void CMsgSteamNetworkingP2PRendezvous_ConnectOK::MergeFrom(const CMsgSteamNetworkingP2PRendezvous_ConnectOK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_crypt()->::CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(from.crypt());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(from.cert());
    }
  }
}

void CMsgSteamNetworkingP2PRendezvous_ConnectOK::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamNetworkingP2PRendezvous_ConnectOK::CopyFrom(const CMsgSteamNetworkingP2PRendezvous_ConnectOK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamNetworkingP2PRendezvous_ConnectOK::IsInitialized() const {
  return true;
}

void CMsgSteamNetworkingP2PRendezvous_ConnectOK::Swap(CMsgSteamNetworkingP2PRendezvous_ConnectOK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamNetworkingP2PRendezvous_ConnectOK::InternalSwap(CMsgSteamNetworkingP2PRendezvous_ConnectOK* other) {
  using std::swap;
  swap(crypt_, other->crypt_);
  swap(cert_, other->cert_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamNetworkingP2PRendezvous_ConnectOK::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::kDebugFieldNumber;
const int CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::kReasonCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamNetworkingP2PRendezvous_ConnectionClosed();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
}
CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed(const CMsgSteamNetworkingP2PRendezvous_ConnectionClosed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  debug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_debug()) {
    debug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_);
  }
  reason_code_ = from.reason_code_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
}

void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::SharedCtor() {
  _cached_size_ = 0;
  debug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_code_ = 0u;
}

CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::~CMsgSteamNetworkingP2PRendezvous_ConnectionClosed() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  SharedDtor();
}

void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::SharedDtor() {
  debug_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamNetworkingP2PRendezvous_ConnectionClosed& CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::default_instance() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamNetworkingP2PRendezvous_ConnectionClosed();
  return *internal_default_instance();
}

CMsgSteamNetworkingP2PRendezvous_ConnectionClosed* CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::New(::google::protobuf::Arena* arena) const {
  CMsgSteamNetworkingP2PRendezvous_ConnectionClosed* n = new CMsgSteamNetworkingP2PRendezvous_ConnectionClosed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!debug_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*debug_.UnsafeRawStringPointer())->clear();
  }
  reason_code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string debug = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug().data(), static_cast<int>(this->debug().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgSteamNetworkingP2PRendezvous.ConnectionClosed.debug");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reason_code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_reason_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  return false;
#undef DO_
}

void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string debug = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug().data(), static_cast<int>(this->debug().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamNetworkingP2PRendezvous.ConnectionClosed.debug");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->debug(), output);
  }

  // optional uint32 reason_code = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->reason_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
}

::google::protobuf::uint8* CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string debug = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug().data(), static_cast<int>(this->debug().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamNetworkingP2PRendezvous.ConnectionClosed.debug");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->debug(), target);
  }

  // optional uint32 reason_code = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->reason_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  return target;
}

size_t CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string debug = 5;
    if (has_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug());
    }

    // optional uint32 reason_code = 6;
    if (has_reason_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamNetworkingP2PRendezvous_ConnectionClosed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamNetworkingP2PRendezvous_ConnectionClosed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
    MergeFrom(*source);
  }
}

void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::MergeFrom(const CMsgSteamNetworkingP2PRendezvous_ConnectionClosed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_debug();
      debug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_);
    }
    if (cached_has_bits & 0x00000002u) {
      reason_code_ = from.reason_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::CopyFrom(const CMsgSteamNetworkingP2PRendezvous_ConnectionClosed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::IsInitialized() const {
  return true;
}

void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::Swap(CMsgSteamNetworkingP2PRendezvous_ConnectionClosed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::InternalSwap(CMsgSteamNetworkingP2PRendezvous_ConnectionClosed* other) {
  using std::swap;
  debug_.Swap(&other->debug_);
  swap(reason_code_, other->reason_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::InitAsDefaultInstance() {
  ::_CMsgSteamNetworkingP2PRendezvous_ReliableMessage_default_instance_._instance.get_mutable()->ice_ = const_cast< ::CMsgICERendezvous*>(
      ::CMsgICERendezvous::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamNetworkingP2PRendezvous_ReliableMessage::kIceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamNetworkingP2PRendezvous_ReliableMessage::CMsgSteamNetworkingP2PRendezvous_ReliableMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamNetworkingP2PRendezvous_ReliableMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
}
CMsgSteamNetworkingP2PRendezvous_ReliableMessage::CMsgSteamNetworkingP2PRendezvous_ReliableMessage(const CMsgSteamNetworkingP2PRendezvous_ReliableMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ice()) {
    ice_ = new ::CMsgICERendezvous(*from.ice_);
  } else {
    ice_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
}

void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::SharedCtor() {
  _cached_size_ = 0;
  ice_ = NULL;
}

CMsgSteamNetworkingP2PRendezvous_ReliableMessage::~CMsgSteamNetworkingP2PRendezvous_ReliableMessage() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  SharedDtor();
}

void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::SharedDtor() {
  if (this != internal_default_instance()) delete ice_;
}

void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamNetworkingP2PRendezvous_ReliableMessage::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamNetworkingP2PRendezvous_ReliableMessage& CMsgSteamNetworkingP2PRendezvous_ReliableMessage::default_instance() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamNetworkingP2PRendezvous_ReliableMessage();
  return *internal_default_instance();
}

CMsgSteamNetworkingP2PRendezvous_ReliableMessage* CMsgSteamNetworkingP2PRendezvous_ReliableMessage::New(::google::protobuf::Arena* arena) const {
  CMsgSteamNetworkingP2PRendezvous_ReliableMessage* n = new CMsgSteamNetworkingP2PRendezvous_ReliableMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ice_ != NULL);
    ice_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamNetworkingP2PRendezvous_ReliableMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgICERendezvous ice = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  return false;
#undef DO_
}

void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgICERendezvous ice = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ice_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
}

::google::protobuf::uint8* CMsgSteamNetworkingP2PRendezvous_ReliableMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgICERendezvous ice = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->ice_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  return target;
}

size_t CMsgSteamNetworkingP2PRendezvous_ReliableMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .CMsgICERendezvous ice = 1;
  if (has_ice()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ice_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamNetworkingP2PRendezvous_ReliableMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamNetworkingP2PRendezvous_ReliableMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
    MergeFrom(*source);
  }
}

void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::MergeFrom(const CMsgSteamNetworkingP2PRendezvous_ReliableMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ice()) {
    mutable_ice()->::CMsgICERendezvous::MergeFrom(from.ice());
  }
}

void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::CopyFrom(const CMsgSteamNetworkingP2PRendezvous_ReliableMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamNetworkingP2PRendezvous_ReliableMessage::IsInitialized() const {
  return true;
}

void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::Swap(CMsgSteamNetworkingP2PRendezvous_ReliableMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::InternalSwap(CMsgSteamNetworkingP2PRendezvous_ReliableMessage* other) {
  using std::swap;
  swap(ice_, other->ice_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamNetworkingP2PRendezvous_ReliableMessage::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamNetworkingP2PRendezvous::InitAsDefaultInstance() {
  ::_CMsgSteamNetworkingP2PRendezvous_default_instance_._instance.get_mutable()->connect_request_ = const_cast< ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest*>(
      ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest::internal_default_instance());
  ::_CMsgSteamNetworkingP2PRendezvous_default_instance_._instance.get_mutable()->connect_ok_ = const_cast< ::CMsgSteamNetworkingP2PRendezvous_ConnectOK*>(
      ::CMsgSteamNetworkingP2PRendezvous_ConnectOK::internal_default_instance());
  ::_CMsgSteamNetworkingP2PRendezvous_default_instance_._instance.get_mutable()->connection_closed_ = const_cast< ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed*>(
      ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamNetworkingP2PRendezvous::kFromIdentityFieldNumber;
const int CMsgSteamNetworkingP2PRendezvous::kFromConnectionIdFieldNumber;
const int CMsgSteamNetworkingP2PRendezvous::kToIdentityFieldNumber;
const int CMsgSteamNetworkingP2PRendezvous::kToConnectionIdFieldNumber;
const int CMsgSteamNetworkingP2PRendezvous::kSdrRoutesFieldNumber;
const int CMsgSteamNetworkingP2PRendezvous::kAckPeerRoutesRevisionFieldNumber;
const int CMsgSteamNetworkingP2PRendezvous::kIceEnabledFieldNumber;
const int CMsgSteamNetworkingP2PRendezvous::kHostedServerTicketFieldNumber;
const int CMsgSteamNetworkingP2PRendezvous::kConnectRequestFieldNumber;
const int CMsgSteamNetworkingP2PRendezvous::kConnectOkFieldNumber;
const int CMsgSteamNetworkingP2PRendezvous::kConnectionClosedFieldNumber;
const int CMsgSteamNetworkingP2PRendezvous::kAckReliableMsgFieldNumber;
const int CMsgSteamNetworkingP2PRendezvous::kFirstReliableMsgFieldNumber;
const int CMsgSteamNetworkingP2PRendezvous::kReliableMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamNetworkingP2PRendezvous::CMsgSteamNetworkingP2PRendezvous()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamNetworkingP2PRendezvous();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamNetworkingP2PRendezvous)
}
CMsgSteamNetworkingP2PRendezvous::CMsgSteamNetworkingP2PRendezvous(const CMsgSteamNetworkingP2PRendezvous& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      reliable_messages_(from.reliable_messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sdr_routes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sdr_routes()) {
    sdr_routes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdr_routes_);
  }
  from_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_identity()) {
    from_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_identity_);
  }
  to_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_identity()) {
    to_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_identity_);
  }
  hosted_server_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hosted_server_ticket()) {
    hosted_server_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hosted_server_ticket_);
  }
  if (from.has_connect_request()) {
    connect_request_ = new ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest(*from.connect_request_);
  } else {
    connect_request_ = NULL;
  }
  if (from.has_connect_ok()) {
    connect_ok_ = new ::CMsgSteamNetworkingP2PRendezvous_ConnectOK(*from.connect_ok_);
  } else {
    connect_ok_ = NULL;
  }
  if (from.has_connection_closed()) {
    connection_closed_ = new ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed(*from.connection_closed_);
  } else {
    connection_closed_ = NULL;
  }
  ::memcpy(&to_connection_id_, &from.to_connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_reliable_msg_) -
    reinterpret_cast<char*>(&to_connection_id_)) + sizeof(first_reliable_msg_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingP2PRendezvous)
}

void CMsgSteamNetworkingP2PRendezvous::SharedCtor() {
  _cached_size_ = 0;
  sdr_routes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hosted_server_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&connect_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&first_reliable_msg_) -
      reinterpret_cast<char*>(&connect_request_)) + sizeof(first_reliable_msg_));
}

CMsgSteamNetworkingP2PRendezvous::~CMsgSteamNetworkingP2PRendezvous() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingP2PRendezvous)
  SharedDtor();
}

void CMsgSteamNetworkingP2PRendezvous::SharedDtor() {
  sdr_routes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_identity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_identity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hosted_server_ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete connect_request_;
  if (this != internal_default_instance()) delete connect_ok_;
  if (this != internal_default_instance()) delete connection_closed_;
}

void CMsgSteamNetworkingP2PRendezvous::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamNetworkingP2PRendezvous::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamNetworkingP2PRendezvous& CMsgSteamNetworkingP2PRendezvous::default_instance() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamNetworkingP2PRendezvous();
  return *internal_default_instance();
}

CMsgSteamNetworkingP2PRendezvous* CMsgSteamNetworkingP2PRendezvous::New(::google::protobuf::Arena* arena) const {
  CMsgSteamNetworkingP2PRendezvous* n = new CMsgSteamNetworkingP2PRendezvous;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamNetworkingP2PRendezvous::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingP2PRendezvous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reliable_messages_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sdr_routes_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sdr_routes_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!from_identity_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*from_identity_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!to_identity_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*to_identity_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!hosted_server_ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hosted_server_ticket_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(connect_request_ != NULL);
      connect_request_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(connect_ok_ != NULL);
      connect_ok_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(connection_closed_ != NULL);
      connection_closed_->Clear();
    }
  }
  to_connection_id_ = 0u;
  if (cached_has_bits & 7936u) {
    ::memset(&ack_peer_routes_revision_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&first_reliable_msg_) -
        reinterpret_cast<char*>(&ack_peer_routes_revision_)) + sizeof(first_reliable_msg_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamNetworkingP2PRendezvous::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamNetworkingP2PRendezvous)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 to_connection_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_to_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &to_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sdr_routes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sdr_routes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ack_peer_routes_revision = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ack_peer_routes_revision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_peer_routes_revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamNetworkingP2PRendezvous.ConnectRequest connect_request = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connect_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamNetworkingP2PRendezvous.ConnectOK connect_ok = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connect_ok()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamNetworkingP2PRendezvous.ConnectionClosed connection_closed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection_closed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ice_enabled = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_ice_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ice_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string from_identity = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_identity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_identity().data(), static_cast<int>(this->from_identity().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgSteamNetworkingP2PRendezvous.from_identity");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 from_connection_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_from_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string to_identity = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_identity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_identity().data(), static_cast<int>(this->to_identity().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgSteamNetworkingP2PRendezvous.to_identity");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ack_reliable_msg = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_ack_reliable_msg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_reliable_msg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 first_reliable_msg = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_first_reliable_msg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_reliable_msg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgSteamNetworkingP2PRendezvous.ReliableMessage reliable_messages = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_reliable_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes hosted_server_ticket = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hosted_server_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamNetworkingP2PRendezvous)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamNetworkingP2PRendezvous)
  return false;
#undef DO_
}

void CMsgSteamNetworkingP2PRendezvous::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamNetworkingP2PRendezvous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 to_connection_id = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->to_connection_id(), output);
  }

  // optional bytes sdr_routes = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sdr_routes(), output);
  }

  // optional uint32 ack_peer_routes_revision = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ack_peer_routes_revision(), output);
  }

  // optional .CMsgSteamNetworkingP2PRendezvous.ConnectRequest connect_request = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->connect_request_, output);
  }

  // optional .CMsgSteamNetworkingP2PRendezvous.ConnectOK connect_ok = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->connect_ok_, output);
  }

  // optional .CMsgSteamNetworkingP2PRendezvous.ConnectionClosed connection_closed = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->connection_closed_, output);
  }

  // optional bool ice_enabled = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->ice_enabled(), output);
  }

  // optional string from_identity = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_identity().data(), static_cast<int>(this->from_identity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamNetworkingP2PRendezvous.from_identity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->from_identity(), output);
  }

  // optional fixed32 from_connection_id = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->from_connection_id(), output);
  }

  // optional string to_identity = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_identity().data(), static_cast<int>(this->to_identity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamNetworkingP2PRendezvous.to_identity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->to_identity(), output);
  }

  // optional uint32 ack_reliable_msg = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->ack_reliable_msg(), output);
  }

  // optional uint32 first_reliable_msg = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->first_reliable_msg(), output);
  }

  // repeated .CMsgSteamNetworkingP2PRendezvous.ReliableMessage reliable_messages = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reliable_messages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->reliable_messages(static_cast<int>(i)), output);
  }

  // optional bytes hosted_server_ticket = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->hosted_server_ticket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamNetworkingP2PRendezvous)
}

::google::protobuf::uint8* CMsgSteamNetworkingP2PRendezvous::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingP2PRendezvous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 to_connection_id = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->to_connection_id(), target);
  }

  // optional bytes sdr_routes = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sdr_routes(), target);
  }

  // optional uint32 ack_peer_routes_revision = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ack_peer_routes_revision(), target);
  }

  // optional .CMsgSteamNetworkingP2PRendezvous.ConnectRequest connect_request = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->connect_request_, deterministic, target);
  }

  // optional .CMsgSteamNetworkingP2PRendezvous.ConnectOK connect_ok = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->connect_ok_, deterministic, target);
  }

  // optional .CMsgSteamNetworkingP2PRendezvous.ConnectionClosed connection_closed = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->connection_closed_, deterministic, target);
  }

  // optional bool ice_enabled = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->ice_enabled(), target);
  }

  // optional string from_identity = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_identity().data(), static_cast<int>(this->from_identity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamNetworkingP2PRendezvous.from_identity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->from_identity(), target);
  }

  // optional fixed32 from_connection_id = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->from_connection_id(), target);
  }

  // optional string to_identity = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_identity().data(), static_cast<int>(this->to_identity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamNetworkingP2PRendezvous.to_identity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->to_identity(), target);
  }

  // optional uint32 ack_reliable_msg = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->ack_reliable_msg(), target);
  }

  // optional uint32 first_reliable_msg = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->first_reliable_msg(), target);
  }

  // repeated .CMsgSteamNetworkingP2PRendezvous.ReliableMessage reliable_messages = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reliable_messages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->reliable_messages(static_cast<int>(i)), deterministic, target);
  }

  // optional bytes hosted_server_ticket = 14;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->hosted_server_ticket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingP2PRendezvous)
  return target;
}

size_t CMsgSteamNetworkingP2PRendezvous::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingP2PRendezvous)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgSteamNetworkingP2PRendezvous.ReliableMessage reliable_messages = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->reliable_messages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->reliable_messages(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes sdr_routes = 2;
    if (has_sdr_routes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sdr_routes());
    }

    // optional string from_identity = 8;
    if (has_from_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_identity());
    }

    // optional string to_identity = 10;
    if (has_to_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_identity());
    }

    // optional bytes hosted_server_ticket = 14;
    if (has_hosted_server_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hosted_server_ticket());
    }

    // optional .CMsgSteamNetworkingP2PRendezvous.ConnectRequest connect_request = 4;
    if (has_connect_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->connect_request_);
    }

    // optional .CMsgSteamNetworkingP2PRendezvous.ConnectOK connect_ok = 5;
    if (has_connect_ok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->connect_ok_);
    }

    // optional .CMsgSteamNetworkingP2PRendezvous.ConnectionClosed connection_closed = 6;
    if (has_connection_closed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->connection_closed_);
    }

    // optional fixed32 to_connection_id = 1;
    if (has_to_connection_id()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint32 ack_peer_routes_revision = 3;
    if (has_ack_peer_routes_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_peer_routes_revision());
    }

    // optional bool ice_enabled = 7;
    if (has_ice_enabled()) {
      total_size += 1 + 1;
    }

    // optional fixed32 from_connection_id = 9;
    if (has_from_connection_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 ack_reliable_msg = 11;
    if (has_ack_reliable_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_reliable_msg());
    }

    // optional uint32 first_reliable_msg = 12;
    if (has_first_reliable_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_reliable_msg());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamNetworkingP2PRendezvous::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamNetworkingP2PRendezvous)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamNetworkingP2PRendezvous* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamNetworkingP2PRendezvous>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamNetworkingP2PRendezvous)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamNetworkingP2PRendezvous)
    MergeFrom(*source);
  }
}

void CMsgSteamNetworkingP2PRendezvous::MergeFrom(const CMsgSteamNetworkingP2PRendezvous& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingP2PRendezvous)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reliable_messages_.MergeFrom(from.reliable_messages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sdr_routes();
      sdr_routes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdr_routes_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_from_identity();
      from_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_identity_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_to_identity();
      to_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_identity_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_hosted_server_ticket();
      hosted_server_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hosted_server_ticket_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_connect_request()->::CMsgSteamNetworkingP2PRendezvous_ConnectRequest::MergeFrom(from.connect_request());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_connect_ok()->::CMsgSteamNetworkingP2PRendezvous_ConnectOK::MergeFrom(from.connect_ok());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_connection_closed()->::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::MergeFrom(from.connection_closed());
    }
    if (cached_has_bits & 0x00000080u) {
      to_connection_id_ = from.to_connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      ack_peer_routes_revision_ = from.ack_peer_routes_revision_;
    }
    if (cached_has_bits & 0x00000200u) {
      ice_enabled_ = from.ice_enabled_;
    }
    if (cached_has_bits & 0x00000400u) {
      from_connection_id_ = from.from_connection_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      ack_reliable_msg_ = from.ack_reliable_msg_;
    }
    if (cached_has_bits & 0x00001000u) {
      first_reliable_msg_ = from.first_reliable_msg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamNetworkingP2PRendezvous::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamNetworkingP2PRendezvous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamNetworkingP2PRendezvous::CopyFrom(const CMsgSteamNetworkingP2PRendezvous& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingP2PRendezvous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamNetworkingP2PRendezvous::IsInitialized() const {
  return true;
}

void CMsgSteamNetworkingP2PRendezvous::Swap(CMsgSteamNetworkingP2PRendezvous* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamNetworkingP2PRendezvous::InternalSwap(CMsgSteamNetworkingP2PRendezvous* other) {
  using std::swap;
  reliable_messages_.InternalSwap(&other->reliable_messages_);
  sdr_routes_.Swap(&other->sdr_routes_);
  from_identity_.Swap(&other->from_identity_);
  to_identity_.Swap(&other->to_identity_);
  hosted_server_ticket_.Swap(&other->hosted_server_ticket_);
  swap(connect_request_, other->connect_request_);
  swap(connect_ok_, other->connect_ok_);
  swap(connection_closed_, other->connection_closed_);
  swap(to_connection_id_, other->to_connection_id_);
  swap(ack_peer_routes_revision_, other->ack_peer_routes_revision_);
  swap(ice_enabled_, other->ice_enabled_);
  swap(from_connection_id_, other->from_connection_id_);
  swap(ack_reliable_msg_, other->ack_reliable_msg_);
  swap(first_reliable_msg_, other->first_reliable_msg_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamNetworkingP2PRendezvous::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamNetworkingICESessionSummary::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamNetworkingICESessionSummary::kFailureReasonCodeFieldNumber;
const int CMsgSteamNetworkingICESessionSummary::kLocalCandidateTypesFieldNumber;
const int CMsgSteamNetworkingICESessionSummary::kRemoteCandidateTypesFieldNumber;
const int CMsgSteamNetworkingICESessionSummary::kInitialRouteKindFieldNumber;
const int CMsgSteamNetworkingICESessionSummary::kInitialPingFieldNumber;
const int CMsgSteamNetworkingICESessionSummary::kInitialScoreFieldNumber;
const int CMsgSteamNetworkingICESessionSummary::kNegotiationMsFieldNumber;
const int CMsgSteamNetworkingICESessionSummary::kBestRouteKindFieldNumber;
const int CMsgSteamNetworkingICESessionSummary::kBestPingFieldNumber;
const int CMsgSteamNetworkingICESessionSummary::kBestScoreFieldNumber;
const int CMsgSteamNetworkingICESessionSummary::kBestTimeFieldNumber;
const int CMsgSteamNetworkingICESessionSummary::kSelectedSecondsFieldNumber;
const int CMsgSteamNetworkingICESessionSummary::kUserSettingsFieldNumber;
const int CMsgSteamNetworkingICESessionSummary::kIceEnableVarFieldNumber;
const int CMsgSteamNetworkingICESessionSummary::kLocalCandidateTypesAllowedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamNetworkingICESessionSummary::CMsgSteamNetworkingICESessionSummary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamNetworkingICESessionSummary();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamNetworkingICESessionSummary)
}
CMsgSteamNetworkingICESessionSummary::CMsgSteamNetworkingICESessionSummary(const CMsgSteamNetworkingICESessionSummary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_candidate_types_, &from.local_candidate_types_,
    static_cast<size_t>(reinterpret_cast<char*>(&best_score_) -
    reinterpret_cast<char*>(&local_candidate_types_)) + sizeof(best_score_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingICESessionSummary)
}

void CMsgSteamNetworkingICESessionSummary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&local_candidate_types_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&best_score_) -
      reinterpret_cast<char*>(&local_candidate_types_)) + sizeof(best_score_));
}

CMsgSteamNetworkingICESessionSummary::~CMsgSteamNetworkingICESessionSummary() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingICESessionSummary)
  SharedDtor();
}

void CMsgSteamNetworkingICESessionSummary::SharedDtor() {
}

void CMsgSteamNetworkingICESessionSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamNetworkingICESessionSummary::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamNetworkingICESessionSummary& CMsgSteamNetworkingICESessionSummary::default_instance() {
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::InitDefaultsCMsgSteamNetworkingICESessionSummary();
  return *internal_default_instance();
}

CMsgSteamNetworkingICESessionSummary* CMsgSteamNetworkingICESessionSummary::New(::google::protobuf::Arena* arena) const {
  CMsgSteamNetworkingICESessionSummary* n = new CMsgSteamNetworkingICESessionSummary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamNetworkingICESessionSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingICESessionSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&local_candidate_types_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&selected_seconds_) -
        reinterpret_cast<char*>(&local_candidate_types_)) + sizeof(selected_seconds_));
  }
  if (cached_has_bits & 32512u) {
    ::memset(&user_settings_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&best_score_) -
        reinterpret_cast<char*>(&user_settings_)) + sizeof(best_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamNetworkingICESessionSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamNetworkingICESessionSummary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 local_candidate_types = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_local_candidate_types();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_candidate_types_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 remote_candidate_types = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_remote_candidate_types();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_candidate_types_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 initial_route_kind = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_initial_route_kind();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_route_kind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 initial_ping = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_initial_ping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_ping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 negotiation_ms = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_negotiation_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &negotiation_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 initial_score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_initial_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 failure_reason_code = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_failure_reason_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &failure_reason_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 selected_seconds = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_selected_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selected_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 user_settings = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_user_settings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_settings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ice_enable_var = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_ice_enable_var();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ice_enable_var_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 local_candidate_types_allowed = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_local_candidate_types_allowed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_candidate_types_allowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_route_kind = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_best_route_kind();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_route_kind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_ping = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_best_ping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_ping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_score = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_best_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_time = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_best_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamNetworkingICESessionSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamNetworkingICESessionSummary)
  return false;
#undef DO_
}

void CMsgSteamNetworkingICESessionSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamNetworkingICESessionSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 local_candidate_types = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->local_candidate_types(), output);
  }

  // optional uint32 remote_candidate_types = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remote_candidate_types(), output);
  }

  // optional uint32 initial_route_kind = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->initial_route_kind(), output);
  }

  // optional uint32 initial_ping = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->initial_ping(), output);
  }

  // optional uint32 negotiation_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->negotiation_ms(), output);
  }

  // optional uint32 initial_score = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->initial_score(), output);
  }

  // optional uint32 failure_reason_code = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->failure_reason_code(), output);
  }

  // optional uint32 selected_seconds = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->selected_seconds(), output);
  }

  // optional uint32 user_settings = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->user_settings(), output);
  }

  // optional uint32 ice_enable_var = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->ice_enable_var(), output);
  }

  // optional uint32 local_candidate_types_allowed = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->local_candidate_types_allowed(), output);
  }

  // optional uint32 best_route_kind = 16;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->best_route_kind(), output);
  }

  // optional uint32 best_ping = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->best_ping(), output);
  }

  // optional uint32 best_score = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->best_score(), output);
  }

  // optional uint32 best_time = 19;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->best_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamNetworkingICESessionSummary)
}

::google::protobuf::uint8* CMsgSteamNetworkingICESessionSummary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingICESessionSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 local_candidate_types = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->local_candidate_types(), target);
  }

  // optional uint32 remote_candidate_types = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remote_candidate_types(), target);
  }

  // optional uint32 initial_route_kind = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->initial_route_kind(), target);
  }

  // optional uint32 initial_ping = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->initial_ping(), target);
  }

  // optional uint32 negotiation_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->negotiation_ms(), target);
  }

  // optional uint32 initial_score = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->initial_score(), target);
  }

  // optional uint32 failure_reason_code = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->failure_reason_code(), target);
  }

  // optional uint32 selected_seconds = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->selected_seconds(), target);
  }

  // optional uint32 user_settings = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->user_settings(), target);
  }

  // optional uint32 ice_enable_var = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->ice_enable_var(), target);
  }

  // optional uint32 local_candidate_types_allowed = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->local_candidate_types_allowed(), target);
  }

  // optional uint32 best_route_kind = 16;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->best_route_kind(), target);
  }

  // optional uint32 best_ping = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->best_ping(), target);
  }

  // optional uint32 best_score = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->best_score(), target);
  }

  // optional uint32 best_time = 19;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->best_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingICESessionSummary)
  return target;
}

size_t CMsgSteamNetworkingICESessionSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingICESessionSummary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 local_candidate_types = 1;
    if (has_local_candidate_types()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_candidate_types());
    }

    // optional uint32 remote_candidate_types = 2;
    if (has_remote_candidate_types()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remote_candidate_types());
    }

    // optional uint32 initial_route_kind = 3;
    if (has_initial_route_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_route_kind());
    }

    // optional uint32 initial_ping = 4;
    if (has_initial_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_ping());
    }

    // optional uint32 negotiation_ms = 5;
    if (has_negotiation_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->negotiation_ms());
    }

    // optional uint32 initial_score = 6;
    if (has_initial_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_score());
    }

    // optional uint32 failure_reason_code = 7;
    if (has_failure_reason_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->failure_reason_code());
    }

    // optional uint32 selected_seconds = 12;
    if (has_selected_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selected_seconds());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional uint32 user_settings = 13;
    if (has_user_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_settings());
    }

    // optional uint32 ice_enable_var = 14;
    if (has_ice_enable_var()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ice_enable_var());
    }

    // optional uint32 local_candidate_types_allowed = 15;
    if (has_local_candidate_types_allowed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_candidate_types_allowed());
    }

    // optional uint32 best_route_kind = 16;
    if (has_best_route_kind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_route_kind());
    }

    // optional uint32 best_time = 19;
    if (has_best_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_time());
    }

    // optional uint32 best_ping = 17;
    if (has_best_ping()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_ping());
    }

    // optional uint32 best_score = 18;
    if (has_best_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_score());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamNetworkingICESessionSummary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamNetworkingICESessionSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamNetworkingICESessionSummary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamNetworkingICESessionSummary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamNetworkingICESessionSummary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamNetworkingICESessionSummary)
    MergeFrom(*source);
  }
}

void CMsgSteamNetworkingICESessionSummary::MergeFrom(const CMsgSteamNetworkingICESessionSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingICESessionSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      local_candidate_types_ = from.local_candidate_types_;
    }
    if (cached_has_bits & 0x00000002u) {
      remote_candidate_types_ = from.remote_candidate_types_;
    }
    if (cached_has_bits & 0x00000004u) {
      initial_route_kind_ = from.initial_route_kind_;
    }
    if (cached_has_bits & 0x00000008u) {
      initial_ping_ = from.initial_ping_;
    }
    if (cached_has_bits & 0x00000010u) {
      negotiation_ms_ = from.negotiation_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      initial_score_ = from.initial_score_;
    }
    if (cached_has_bits & 0x00000040u) {
      failure_reason_code_ = from.failure_reason_code_;
    }
    if (cached_has_bits & 0x00000080u) {
      selected_seconds_ = from.selected_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      user_settings_ = from.user_settings_;
    }
    if (cached_has_bits & 0x00000200u) {
      ice_enable_var_ = from.ice_enable_var_;
    }
    if (cached_has_bits & 0x00000400u) {
      local_candidate_types_allowed_ = from.local_candidate_types_allowed_;
    }
    if (cached_has_bits & 0x00000800u) {
      best_route_kind_ = from.best_route_kind_;
    }
    if (cached_has_bits & 0x00001000u) {
      best_time_ = from.best_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      best_ping_ = from.best_ping_;
    }
    if (cached_has_bits & 0x00004000u) {
      best_score_ = from.best_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamNetworkingICESessionSummary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamNetworkingICESessionSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamNetworkingICESessionSummary::CopyFrom(const CMsgSteamNetworkingICESessionSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingICESessionSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamNetworkingICESessionSummary::IsInitialized() const {
  return true;
}

void CMsgSteamNetworkingICESessionSummary::Swap(CMsgSteamNetworkingICESessionSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamNetworkingICESessionSummary::InternalSwap(CMsgSteamNetworkingICESessionSummary* other) {
  using std::swap;
  swap(local_candidate_types_, other->local_candidate_types_);
  swap(remote_candidate_types_, other->remote_candidate_types_);
  swap(initial_route_kind_, other->initial_route_kind_);
  swap(initial_ping_, other->initial_ping_);
  swap(negotiation_ms_, other->negotiation_ms_);
  swap(initial_score_, other->initial_score_);
  swap(failure_reason_code_, other->failure_reason_code_);
  swap(selected_seconds_, other->selected_seconds_);
  swap(user_settings_, other->user_settings_);
  swap(ice_enable_var_, other->ice_enable_var_);
  swap(local_candidate_types_allowed_, other->local_candidate_types_allowed_);
  swap(best_route_kind_, other->best_route_kind_);
  swap(best_time_, other->best_time_);
  swap(best_ping_, other->best_ping_);
  swap(best_score_, other->best_score_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamNetworkingICESessionSummary::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
